(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{F8HQ:function(n,e){n.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {ToggleSwitchTypeRender} from './SwitchType/toggle'\nimport {SingleSwitchTypeRender} from './SwitchType/single'\nimport {SIZES, TYPES, SUPPORTED_KEYS} from './config'\n\nclass AtomSwitch extends Component {\n  state = {\n    isToggle: this.props.initialValue,\n    isFocus: false,\n    isClick: false\n  }\n\n  _onKeyDown = event => {\n    if (this.props.disabled === true) return\n\n    if (SUPPORTED_KEYS.includes(event.key)) {\n      this._onToggle()\n      event.preventDefault()\n    }\n  }\n\n  _onToggle = forceValue => {\n    const {disabled, onToggle, value} = this.props\n\n    if (disabled === true) return\n\n    if (value !== undefined) {\n      return onToggle(!value)\n    }\n\n    const {isToggle: stateToggle} = this.state\n    const isToggle = forceValue !== undefined ? forceValue : !stateToggle\n    this.setState({isToggle}, () => onToggle(isToggle))\n  }\n\n  _onBlur = () => {\n    this.setState({isFocus: false, isClick: false})\n  }\n\n  _onFocus = e => {\n    setTimeout(() => {\n      this.setState({isFocus: true})\n    }, 150)\n  }\n\n  _onClick = e => {\n    this.setState({isClick: true})\n  }\n\n  render() {\n    const {isToggle, isFocus, isClick} = this.state\n\n    const commonProps = {\n      ...this.props,\n      isFocus,\n      isClick,\n      isToggle,\n      onBlur: this._onBlur,\n      onClick: this._onClick,\n      onFocus: this._onFocus,\n      onKeyDown: this._onKeyDown,\n      onToggle: this._onToggle\n    }\n\n    return this.props.type === TYPES.SINGLE ? (\n      <SingleSwitchTypeRender {...commonProps} />\n    ) : (\n      <ToggleSwitchTypeRender {...commonProps} />\n    )\n  }\n}\n\nAtomSwitch.displayName = 'AtomSwitch'\n\nAtomSwitch.propTypes = {\n  /**\n   * Whether switch is checked on init. Uncontrolled state component\n   */\n  initialValue: PropTypes.bool,\n  /**\n   * Size of switch: 'default', 'large'\n   */\n  size: PropTypes.oneOf([SIZES.DEFAULT, SIZES.LARGE]),\n  /**\n   * Type of switch: 'toggle' (default), 'select', 'single'\n   */\n  type: PropTypes.oneOf([TYPES.TOGGLE, TYPES.SELECT, TYPES.SINGLE]),\n  /**\n   * Is Input disabled?\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Left label to be printed\n   */\n  labelLeft: PropTypes.string,\n  /**\n   * Right label to be printed\n   */\n  labelRight: PropTypes.string,\n  /**\n   * Form element name\n   */\n  name: PropTypes.string.isRequired,\n  /**\n   * The label itself. Proxy from label\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * The optional label text. Proxy from label\n   */\n  labelOptionalText: PropTypes.string,\n  /**\n   * Callback to be called when switch. Flag whenever switch is active or not sent\n   */\n  onToggle: PropTypes.func.isRequired,\n  /**\n   * Whether switch is checked. Controlled state component. Don't combine with initialValue prop!\n   */\n  value: PropTypes.bool\n}\n\nAtomSwitch.defaultProps = {\n  disabled: false,\n  initialValue: false,\n  labelLeft: 'Off',\n  labelRight: 'On',\n  size: SIZES.DEFAULT,\n  type: TYPES.TOGGLE\n}\n\nexport default AtomSwitch\n"}}]);