(window.webpackJsonp=window.webpackJsonp||[]).push([[202],{"2TyL":function(n,o){n.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '@schibstedspain/sui-atom-button'\nimport IconClose from '@schibstedspain/sui-svgiconset/lib/Close'\nimport IconSuccess from '@schibstedspain/sui-svgiconset/lib/Linecheck'\nimport IconError from '@schibstedspain/sui-svgiconset/lib/Lineerror'\nimport IconInfo from '@schibstedspain/sui-svgiconset/lib/Lineinfo'\nimport IconWarning from '@schibstedspain/sui-svgiconset/lib/Linewarning'\nimport cx from 'classnames'\n\nconst CLASS = 'sui-MoleculeNotification'\n\nconst ICONS = {\n  info: <IconInfo />,\n  error: <IconError />,\n  success: <IconSuccess />,\n  system: <IconInfo />,\n  warning: <IconWarning />\n}\n\nconst AUTO_CLOSE_TIME = {\n  short: 3000,\n  medium: 6000,\n  long: 9000,\n  manual: null\n}\n\nconst TRANSITION_DELAY = 1000 // ms\nconst BUTTONS_MAX = 3 // buttons\n\nconst VARIATIONS = {\n  negative: 'negative',\n  positive: 'positive'\n}\n\nclass MoleculeNotification extends Component {\n  state = {\n    show: this.props.show,\n    delay: false\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.state.show !== nextProps.show && this.toggleShow()\n  }\n\n  componentDidMount() {\n    const {show} = this.state\n    if (show) {\n      this.autoCloseIfRequired()\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const {show, delay} = this.state\n    return show !== nextState.show || delay !== nextState.delay\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.autoCloseTimout)\n    clearTimeout(this.transitionTimout)\n  }\n\n  toggleShow = () => {\n    const show = !this.state.show\n    const {onClose, effect} = this.props\n\n    effect\n      ? this.setState({show, delay: true}, this.removeDelay(show))\n      : this.setState({show})\n\n    if (show) {\n      this.autoCloseIfRequired()\n    } else {\n      clearTimeout(this.autoCloseTimout)\n      onClose()\n    }\n  }\n\n  autoCloseIfRequired() {\n    const {autoClose: autoCloseTiming} = this.props\n\n    if (AUTO_CLOSE_TIME[autoCloseTiming]) {\n      this.autoClose(AUTO_CLOSE_TIME[autoCloseTiming])\n    }\n  }\n\n  autoClose = time => {\n    this.autoCloseTimout = setTimeout(() => {\n      const {show} = this.state\n      show && this.toggleShow()\n    }, time)\n  }\n\n  removeDelay = show => {\n    const delay = show ? 1 : TRANSITION_DELAY\n    this.transitionTimout = setTimeout(() => {\n      this.setState({delay: false})\n    }, delay)\n  }\n\n  getButtons = () => {\n    const {buttons} = this.props\n    return buttons\n      .slice(0, BUTTONS_MAX)\n      .map((button, i) => <Button key={i} {...button} />)\n  }\n\n  render() {\n    const {show, delay} = this.state\n    const {\n      buttons,\n      children,\n      effect,\n      icon,\n      position,\n      showCloseButton,\n      text,\n      type,\n      variation\n    } = this.props\n    const wrapperClassName = cx(\n      `${CLASS} ${CLASS}--${type} ${CLASS}--${position}`,\n      {\n        [`${CLASS}--${variation}`]: variation === VARIATIONS.positive,\n        [`${CLASS}-effect--${position}`]: effect,\n        [`${CLASS}-effect--hide`]: effect && delay\n      }\n    )\n    const innerWrapperClassName = cx({\n      [`${CLASS}-children`]: children,\n      [`${CLASS}-text`]: text\n    })\n\n    if (!show && !delay) {\n      return null\n    }\n\n    return (\n      <div className={wrapperClassName}>\n        <div className={`${CLASS}-content`}>\n          <div className={`${CLASS}-iconLeft`}>\n            <span className={`${CLASS}-icon`}>{icon || ICONS[type]}</span>\n          </div>\n          <div className={innerWrapperClassName}>{children || text}</div>\n          {showCloseButton && (\n            <div className={`${CLASS}-iconClose`} onClick={this.toggleShow}>\n              <span className={`${CLASS}-icon`}>\n                <IconClose />\n              </span>\n            </div>\n          )}\n        </div>\n        {buttons && (\n          <div className={`${CLASS}-buttonsContainer`}>{this.getButtons()}</div>\n        )}\n      </div>\n    )\n  }\n}\n\nMoleculeNotification.displayName = 'MoleculeNotification'\n\nMoleculeNotification.propTypes = {\n  /**\n   * Auto close time: 'short' (3s), 'medium' (6s), 'long' (9s), 'manual' or null (disabled)\n   */\n  autoClose: PropTypes.string,\n  /**\n   * Array of props to sui-atom-buttons. Max: 3 buttons\n   */\n  buttons: PropTypes.array,\n  /**\n   * Notification content\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Transition enabled\n   */\n  effect: PropTypes.bool,\n  /**\n   * Icon to be added on the left of the content\n   */\n  icon: PropTypes.node,\n  /**\n   * On close callback\n   */\n  onClose: PropTypes.func,\n  /**\n   * Positions: 'top', 'bottom', 'relative'\n   */\n  position: PropTypes.string,\n  /**\n   * Show / hide notification\n   */\n  show: PropTypes.bool,\n  /**\n   * Show / hide close button\n   */\n  showCloseButton: PropTypes.bool,\n  /**\n   * Content text. Deprecated, use children instead.\n   */\n  text: PropTypes.string,\n  /**\n   * Notification type: 'info', 'success', 'warning', 'error', 'system'.\n   */\n  type: PropTypes.string,\n  /**\n   * Color variation of the notification: 'positive' with washed out colors, 'negative' with bold colors\n   */\n  variation: PropTypes.oneOf(Object.keys(VARIATIONS))\n}\n\nMoleculeNotification.defaultProps = {\n  autoClose: 'short',\n  effect: true,\n  onClose: () => {},\n  position: 'relative',\n  show: true,\n  showCloseButton: true,\n  type: 'info',\n  variation: VARIATIONS.negative\n}\n\nexport default MoleculeNotification\n"}}]);