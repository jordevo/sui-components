(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{jPxx:function(n,e){n.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nimport {htmlImgProps} from './types'\n\nconst BASE_CLASS = 'sui-AtomImage'\nconst BASE_CLASS_FIGURE = `${BASE_CLASS}-figure`\nconst CLASS_PLACEHOLDER = `${BASE_CLASS_FIGURE}--placeholder`\nconst CLASS_SKELETON = `${BASE_CLASS_FIGURE}--skeleton`\nconst CLASS_IMAGE = `${BASE_CLASS}-image`\nconst CLASS_SPINNER = `${BASE_CLASS}-spinner`\nconst CLASS_ERROR = `${BASE_CLASS}-error`\n\nconst Error = (\n  {className, icon: Icon, text} // eslint-disable-line react/prop-types\n) => (\n  <div className={className}>\n    {Icon}\n    <p>{text}</p>\n  </div>\n)\n\nclass AtomImage extends Component {\n  state = {\n    loading: true,\n    error: false\n  }\n\n  imageRef = React.createRef()\n\n  get classNames() {\n    const {loading, error} = this.state\n    return cx(\n      BASE_CLASS,\n      `is-${loading ? 'loading' : 'loaded'}`,\n      error && `is-error`\n    )\n  }\n\n  get classNamesFigure() {\n    const {placeholder, skeleton} = this.props\n    return cx(\n      BASE_CLASS_FIGURE,\n      placeholder && CLASS_PLACEHOLDER,\n      skeleton && CLASS_SKELETON\n    )\n  }\n\n  handleLoad = () => {\n    const {onLoad} = this.props\n    this.setState({loading: false})\n    onLoad && onLoad()\n  }\n\n  handleError = () => {\n    const {onError} = this.props\n    this.setState({\n      error: true,\n      loading: false\n    })\n    onError && onError()\n  }\n\n  componentDidMount() {\n    const img = this.imageRef.current\n    if (img && img.complete && this.state.loading) {\n      this.handleLoad()\n    }\n  }\n\n  render() {\n    const {\n      placeholder,\n      skeleton,\n      bgStyles,\n      spinner: Spinner,\n      errorIcon,\n      errorText,\n      onError,\n      onLoad,\n      ...imgProps\n    } = this.props\n\n    const {loading, error} = this.state\n\n    const figureStyles = {\n      backgroundImage: `url(${placeholder || skeleton})`\n    }\n\n    const SpinnerExtended =\n      Spinner &&\n      React.cloneElement(Spinner, {\n        className: CLASS_SPINNER\n      })\n\n    return (\n      <div className={this.classNames}>\n        <figure\n          className={this.classNamesFigure}\n          style={!error && (placeholder || skeleton) ? figureStyles : {}}\n        >\n          <img\n            className={CLASS_IMAGE}\n            onLoad={this.handleLoad}\n            onError={this.handleError}\n            ref={this.imageRef}\n            {...imgProps}\n          />\n        </figure>\n        {!error && loading && SpinnerExtended}\n        {error && (\n          <Error className={CLASS_ERROR} icon={errorIcon} text={errorText} />\n        )}\n      </div>\n    )\n  }\n}\n\nAtomImage.displayName = 'AtomImage'\nAtomImage.propTypes = {\n  /** Image url or base64 */\n  src: PropTypes.string.isRequired,\n\n  /** Description of the image */\n  alt: PropTypes.string.isRequired,\n\n  /** Image displayed (blurred) while the final image is being loaded */\n  placeholder: PropTypes.string,\n\n  /** Image (wireframe, skeleton) displayed (not blurred) while the final image is being loaded */\n  skeleton: PropTypes.string,\n\n  /** Spinner (component) displayed while the final image is being loaded */\n  spinner: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  /** Icon (component) to be displayed in an Error Box when the image cannot be loaded */\n  errorIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  /** Text to be displayed in an Error Box when the image cannot be loaded */\n  errorText: PropTypes.string,\n\n  /** Function to be called when the image cannot be loaded  */\n  onError: PropTypes.func,\n\n  /** Function to be called when the image completed its loading  */\n  onLoad: PropTypes.func,\n\n  /** <img> props */\n  ...htmlImgProps\n}\n\nexport default AtomImage\n"}}]);