(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{"XJp/":function(n,e){n.exports="import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport Tab from './Tab'\n\nconst BASE_CLASS = 'sui-MoleculeAccordion'\n\nfunction MoleculeAccordion(props) {\n  const [openTabs, setOpenTabs] = useState([])\n  const {children, ...tabProps} = props\n\n  function onToggle(id) {\n    const {withAutoClose} = props\n    let newOpenTabs = []\n    if (withAutoClose) {\n      newOpenTabs[id] = openTabs[id] ? undefined : true\n    } else {\n      newOpenTabs = [...openTabs]\n      newOpenTabs[id] = newOpenTabs[id] ? undefined : true\n    }\n    setOpenTabs([...newOpenTabs])\n  }\n\n  return (\n    <div className={BASE_CLASS}>\n      {children.map((child, index) => (\n        <Tab\n          key={index}\n          isOpen={!!openTabs[index]}\n          title={child.props.label}\n          onToggle={() => onToggle(index)}\n          {...tabProps}\n        >\n          {child.props.children}\n        </Tab>\n      ))}\n    </div>\n  )\n}\n\nMoleculeAccordion.displayName = 'MoleculeAccordion'\n\nMoleculeAccordion.propTypes = {\n  /**\n   * Children to put into Accordion Tabs\n   */\n  children: PropTypes.instanceOf(Object).isRequired,\n  /**\n   * Icon for the button\n   */\n  icon: PropTypes.node.isRequired,\n  /**\n   * Define the max height visible\n   */\n  maxHeight: PropTypes.number,\n  /**\n   * Define the auto height\n   */\n  autoHeight: PropTypes.bool,\n  /**\n   * Activate/deactivate autoclose\n   */\n  withAutoClose: PropTypes.bool,\n  /**\n   * Force scroll visible\n   */\n  withScrollVisible: PropTypes.bool,\n  /**\n   * Activate/deactivate transition\n   */\n  withTransition: PropTypes.bool,\n  /**\n   * Activate/deactivate gap between tabs\n   */\n  withGap: PropTypes.bool\n}\nMoleculeAccordion.defaultProps = {\n  withAutoClose: true\n}\n\nexport default MoleculeAccordion\n"}}]);