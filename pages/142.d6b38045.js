(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{yJ2B:function(n,e){n.exports="import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nimport ActionableTag from './Actionable'\nimport StandardTag from './Standard'\n\nconst ACTIONABLE_ONLY_PROPS = [\n  'href',\n  'iconPlacement',\n  'target',\n  'actionable',\n  'linkFactory'\n]\nconst STANDARD_ONLY_PROPS = ['closeIcon', 'onClose']\nconst SIZES = {\n  LARGE: 'large',\n  MEDIUM: 'medium',\n  SMALL: 'small'\n}\n\n/**\n * returns key:value in obj except for those keys defined in props\n * @param {Object} obj\n * @param {Array.<string>} props\n * @return {Object}\n */\nconst filterKeys = (obj, listOfProps) =>\n  Object.keys(obj).reduce((acc, key) => {\n    if (listOfProps.indexOf(key) === -1) {\n      acc[key] = obj[key]\n    }\n    return acc\n  }, {})\n\nconst AtomTag = props => {\n  const {href, icon, onClick, size, responsive} = props\n\n  const isActionable = onClick || href\n  const classNames = cx(\n    'sui-AtomTag',\n    `sui-AtomTag-${size}`,\n    responsive && 'sui-AtomTag--responsive',\n    icon && 'sui-AtomTag-hasIcon'\n  )\n\n  /**\n   * Removes all actionable tag props from the react props\n   * @return {Object}\n   */\n  const getStandardProps = () => filterKeys(props, ACTIONABLE_ONLY_PROPS)\n\n  /**\n   * Removes all standard tag props from the react props\n   * @return {Object}\n   */\n  const getActionableProps = () => filterKeys(props, STANDARD_ONLY_PROPS)\n\n  return isActionable ? (\n    <ActionableTag {...getActionableProps()} className={classNames} />\n  ) : (\n    <StandardTag {...getStandardProps()} className={classNames} />\n  )\n}\n\nAtomTag.displayName = 'AtomTag'\n\nAtomTag.defaultProps = {\n  iconPlacement: 'left'\n}\n\nAtomTag.propTypes = {\n  /**\n   * Custom classes\n   */\n  className: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  icon: PropTypes.node,\n  onClose: PropTypes.func,\n  /**\n   * Will only be shown if the onClose fn is defined\n   */\n  closeIcon: PropTypes.node,\n  /**\n   * If defined, onClose will be ignored\n   */\n  onClick: PropTypes.func,\n  /**\n   * generates type of link\n   */\n  linkFactory: PropTypes.func,\n  /**\n   * Actionable tags can be used as an anchor. Same as <a> href\n   */\n  href: PropTypes.string,\n  /**\n   * To be used if href is defined\n   */\n  target: PropTypes.oneOf(['_self', '_blank', '_parent', '_top']),\n  /**\n   * Actionable tags can have iconPlacement='right'\n   */\n  iconPlacement: PropTypes.oneOf(['right', 'left']),\n  /**\n   * Tag size\n   */\n  size: PropTypes.oneOf(Object.values(SIZES)),\n  /**\n   * true for make responsive layout. keep large size in mobile\n   */\n  responsive: PropTypes.bool\n}\n\nAtomTag.defaultProps = {\n  size: SIZES.MEDIUM\n}\n\nexport default AtomTag\nexport {SIZES as atomTagSizes}\n"}}]);