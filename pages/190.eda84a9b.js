(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{thmL:function(e,n){e.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nimport AtomValidationText, {\n  AtomValidationTextTypes\n} from '@s-ui/react-atom-validation-text'\nimport AtomLabel, {AtomLabelTypes} from '@s-ui/react-atom-label'\nimport AtomHelpText from '@s-ui/react-atom-help-text'\n\nconst BASE_CLASS = 'sui-MoleculeField'\nconst CLASS_CONTAINER = `${BASE_CLASS}-inputContainer`\n\nclass MoleculeField extends Component {\n  get className() {\n    const {inline} = this.props\n    return cx(BASE_CLASS, inline && `${BASE_CLASS}--inline`)\n  }\n\n  getTypeValidation(element) {\n    if (this.props.errorText) {\n      if (element === 'label') return AtomLabelTypes.ERROR\n      if (element === 'validationText') return AtomValidationTextTypes.ERROR\n    }\n    if (this.props.successText) {\n      if (element === 'label') return AtomLabelTypes.SUCCESS\n      if (element === 'validationText') return AtomValidationTextTypes.SUCCESS\n    }\n  }\n\n  get statusValidationText() {\n    if (this.props.errorText) return this.props.errorText\n    if (this.props.successText) return this.props.successText\n  }\n\n  render() {\n    const {\n      label,\n      helpText,\n      name,\n      successText,\n      errorText,\n      onClickLabel,\n      children // eslint-disable-line react/prop-types\n    } = this.props\n\n    return (\n      <div className={this.className}>\n        <AtomLabel\n          type={this.getTypeValidation('label')}\n          name={name}\n          text={label}\n          onClick={onClickLabel}\n        />\n        <div className={CLASS_CONTAINER}>\n          {children}\n          {(successText || errorText) && (\n            <AtomValidationText\n              type={this.getTypeValidation('validationText')}\n              text={this.statusValidationText}\n            />\n          )}\n          {helpText && <AtomHelpText text={helpText} />}\n        </div>\n      </div>\n    )\n  }\n}\n\nMoleculeField.displayName = 'MoleculeField'\n\nMoleculeField.propTypes = {\n  /** Text to be displayed as label of the textarea */\n  label: PropTypes.string.isRequired,\n\n  /** used as for attribute. Must be the same as the input element id */\n  name: PropTypes.string.isRequired,\n\n  /** Success message to display when success state  */\n  successText: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n  /** Error message to display when error state  */\n  errorText: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n  /** Help Text to display */\n  helpText: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n  /** Boolean to decide if elements should be set inline */\n  inline: PropTypes.bool,\n\n  /** Boolean to decide if elements should be set inline */\n  onClickLabel: PropTypes.func\n}\n\nexport default MoleculeField\n"}}]);