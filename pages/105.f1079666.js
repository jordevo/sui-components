(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{s4Wc:function(n,e){n.exports="import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nconst MAX_LABEL_LENGTH = 100\nconst TRANSPARENT = 'transparent'\nconst SIZES = {\n  LARGE: 'large',\n  SMALL: 'small'\n}\n\nconst TYPES = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  INFO: 'info',\n  ALERT: 'alert'\n}\n\n/**\n * Cuts off exceeded char limit\n * @param  {string} label\n * @return {string}\n */\nconst truncateText = function(label) {\n  return label.length < MAX_LABEL_LENGTH\n    ? label\n    : label.substr(0, MAX_LABEL_LENGTH)\n}\n\n/**\n * @param  {string} options.className\n * @param  {string} options.size\n * @param  {boolean} options.transparent\n * @param  {string} options.type\n * @return {string}\n */\nconst getClassNames = function({className, size, transparent, type}) {\n  const transparentClass = (transparent && `--${TRANSPARENT}`) || ''\n\n  return cx(\n    'sui-AtomBadge',\n    `sui-AtomBadge-${size}`,\n    `sui-AtomBadge-${type}${transparentClass}`,\n    className\n  )\n}\n\n/**\n * Small badges with background can't have icon\n * @param  {Object} options.icon\n * @param  {string} options.size\n * @param  {boolean} options.transparent\n * @return {boolean}\n */\nconst shouldRenderIcon = function({icon, size, transparent}) {\n  return icon && (size !== SIZES.SMALL || transparent)\n}\n\nconst AtomBadge = function({icon, label, ...props}) {\n  const truncatedLabel = truncateText(label)\n  const classNames = getClassNames(props)\n\n  return (\n    <div className={classNames}>\n      {shouldRenderIcon({icon, ...props}) && (\n        <span className=\"sui-AtomBadge-icon\">{icon}</span>\n      )}\n      <span className=\"sui-AtomBadge-text\" title={truncatedLabel}>\n        {label}\n      </span>\n    </div>\n  )\n}\n\nAtomBadge.displayName = 'AtomBadge'\n\nAtomBadge.propTypes = {\n  /**\n   * CSS Classes to be added to the component\n   */\n  className: PropTypes.string,\n  /**\n   * Badge text to be shown\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * Custom svg icon to be shown\n   */\n  icon: PropTypes.node,\n  /**\n   * Whether show a background color\n   */\n  transparent: PropTypes.bool,\n  /**\n   * Determine the size of the badge\n   */\n  size: PropTypes.oneOf(Object.values(SIZES)),\n  /**\n   * Determine the type of the badge\n   */\n  type: PropTypes.oneOf(Object.values(TYPES))\n}\n\nAtomBadge.defaultProps = {\n  size: SIZES.SMALL,\n  type: TYPES.SUCCESS\n}\n\nexport default AtomBadge\nexport {TYPES as atomBadgeTypes, SIZES as atomBadgeSizes}\n"}}]);