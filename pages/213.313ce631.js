(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{Ypfs:function(n,e){n.exports="# MoleculeSelect\n\n`MoleculeSelect` is a customized `select` created from a combination of `AtomInput`, `MoleculeInputTags`, `MoleculeDropdownList` and `MoleculeDropdownOption`\n\nIt allows Single and Multiple Selection\n\n## Installation\n\n```sh\n$ npm install @s-ui/react-molecule-select --save\n```\n\n## Usage\n\n```js\nimport MoleculeSelect, {\n  moleculeSelectDropdownListSizes\n} from '@s-ui/react-molecule-select'\nimport MoleculeSelectOption from '@s-ui/react-molecule-dropdown-option'\n\nconst IconCloseTag = () => <span>x</span>  \nconst IconArrowDown = () => <span>\u25bc</span>  \n\nconst options = ['John','Paul','George','Ringo']\n```\n\n### Single Selection\n\n#### Basic usage\n```js\n<MoleculeSelect\n      placeholder=\"Select a Country...\"\n      onChange={(_, {value}) => console.log(value)}\n      iconArrowDown={<IconArrowDown />}\n    >\n  {options.map((option, i) => (\n    <MoleculeSelectOption key={i} value={option}>\n      {option}\n    </MoleculeSelectOption>\n  ))}\n</MoleculeSelect>\n```\n\n#### With default value\n```js\n<MoleculeSelect\n      placeholder=\"Select a Country...\"\n      onChange={(_, {value}) => console.log(value)}\n      iconArrowDown={<IconArrowDown />}\n      value='John'\n    >\n  {options.map((option, i) => (\n    <MoleculeSelectOption key={i} value={option}>\n      {option}\n    </MoleculeSelectOption>\n  ))}\n</MoleculeSelect>\n```\n\n#### Large List\n```js\n<MoleculeSelect\n      placeholder=\"Select a Country...\"\n      onChange={(_, {value}) => console.log(value)}\n      iconArrowDown={<IconArrowDown />}\n      size={moleculeSelectDropdownListSizes.LARGE}\n    >\n  {options.map((option, i) => (\n    <MoleculeSelectOption key={i} value={option}>\n      {option}\n    </MoleculeSelectOption>\n  ))}\n</MoleculeSelect>\n```\n\n### Multiple Selection\n\n#### Basic usage\n```js\n <MoleculeSelect\n  iconCloseTag={<IconCloseTag />}\n  iconArrowDown={<IconArrowDown />}\n  multiselection\n  value={['John','Paul']}\n>\n  {options.map((option, i) => (\n    <MoleculeSelectOption key={i} value={option}>\n      {option}\n    </MoleculeSelectOption>\n  ))}\n</MoleculeSelect>\n```\n\n## Managing State\n\n### Custom component from `MoleculeSelect` that handle State\n\n`MoleculeSelect` is a stateless component, so to manage dynamic options we need to create a wrapper component that manages this and pass proper `props` and proper children (`MoleculeSelectOption`) to `MoleculeSelect`\n\nExample:\n\n```js\nimport React, {Component} from 'react'\n\nimport MoleculeSelect from '@s-ui/react-molecule-select'\nimport MoleculeSelectOption from '@s-ui/react-molecule-dropdown-option'\n\nconst options = ['John','Paul','George','Ringo']\n\nexport default class SelectSingleWithAsyncOptions extends Component {\n  state = {value: ''}\n\n  onChange = async (e, {value}) => {\n    this.setState({value})\n  }\n\n  render() {\n    const {value} = this.state\n    const {onChange, props} = this\n\n    return (\n      <MoleculeSelect {...props} value={value} onChange={onChange}>\n        {options.map((option, i) => (\n          <MoleculeSelectOption key={i} value={option}>\n            {option}\n          </MoleculeSelectOption>\n        ))}\n      </MoleculeSelect>\n    )\n  }\n}\n\n```\n\nso then, the `SelectSingleWithAsyncOptions` can used in this way...\n\n```js\n  <SelectSingleWithAsyncOptions iconClear={<IconClear />} />\n```\n\n### Using the hoc `withStateValue`\n\nThere's a hoc called `withStateValue` available at `@s-ui/hoc` \nthat can be used to simplify the use of this component with internal state \n\n```js\n\nimport MoleculeSelect from '@s-ui/react-molecule-select'\nimport MoleculeSelectOption from '@s-ui/react-molecule-dropdown-option'\n\nimport withDynamicOptions from './hoc/withDynamicOptions'\nimport {withStateValue} from '@s-ui/hoc'\n\nconst MoleculeSelectWithState = withStateValue(MoleculeSelect)\nconst options = ['John','Paul','George','Ringo']\n\n```\n\nso then, the `MoleculeSelectWithState` can be used in this way...\n\n```js\n<MoleculeSelectWithState\n  placeholder=\"Type a Country name...\"\n  onChange={(_, {value}) => console.log(value)}\n  iconClear={<IconClear />}\n>\n  {options.map((option, i) => (\n    <MoleculeSelectOption key={i} value={option}>\n      {option}\n    </MoleculeSelectOption>\n  ))}\n</MoleculeSelectWithState>\n```\n\n## Create custom option compatible w/ `MoleculeSelect`\n\nIf you need an option that cannot be customized from `MoleculeDropdownOption` you can create your own option compatible w/ `MoleculeSelect` y `MoleculeSelect` by using the `handlersFactory` method available in `MoleculeDropdownOption` that you can use to create proper handlers needed to work properly along w/ `MoleculeSelect` y `MoleculeSelect`\n\n```js\nimport React from 'react'\nimport {handlersFactory} from '@s-ui/react-molecule-dropdown-option'\n\nconst BASE_CLASS = 'AlternativeOption'\n\nconst AlternativeOption = ({children, onSelect, innerRef, value}) => {\n  const {handleClick, handleKeyDown, handleFocus} = handlersFactory({\n    value,\n    onSelect\n  })\n\n  return (\n    <div\n      className={BASE_CLASS}\n      ref={innerRef}\n      tabIndex=\"0\"\n      onFocus={handleFocus}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      {children}\n    </div>\n  )\n}\n\nAlternativeOption.displayName = 'AlternativeOption'\n\nAlternativeOption.defaultProps = {\n  onSelect: () => {},\n  innerRef: React.createRef()\n}\n\nexport default AlternativeOption\n```\n\nso then you can do something like...\n\n```js\n<MoleculeSelect\n  placeholder=\"Select an Option...\"\n  onChange={(_, {value}) => console.log(value)}\n  iconArrowDown={<IconArrowDown />}\n>\n  {options.map((option, i) => (\n    <AlternativeOption key={i} value={option}>\n      {option}\n    </AlternativeOption>\n  ))}\n</MoleculeSelect>\n```\n\n\n\n> **Find full description and more examples in the [demo page](https://sui-components.now.sh/workbench/molecule/select/demo).**"}}]);