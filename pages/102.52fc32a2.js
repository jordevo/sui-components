(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{aqSq:function(n,o){n.exports="import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport {getTarget} from '@s-ui/js/lib/react'\n\nconst BASE_CLASS = 'sui-AtomBackToTop'\nconst CLASS_ICON = `${BASE_CLASS}-icon`\nconst CLASS_TEXT = `${BASE_CLASS}-text`\nconst CLASS_SHOW = `${BASE_CLASS}--show`\nconst CLASS_HIDE = `${BASE_CLASS}--hide`\nconst CLASS_HOVER = `${CLASS_SHOW}--hover`\nconst CLASS_READY = `${BASE_CLASS}--ready`\n\nconst STYLES = {\n  DARK: 'dark',\n  LIGHT: 'light'\n}\n\nclass AtomBackToTop extends PureComponent {\n  state = {\n    show: null,\n    hover: false\n  }\n\n  intervalId = 0\n  container = null\n\n  scrollStep = () => {\n    const {scrollTop} = this.container\n    const {scrollSteps} = this.props\n    const {intervalId} = this\n\n    if (scrollTop === 0) clearInterval(intervalId)\n    this.container.scrollTop = scrollTop - scrollSteps\n  }\n\n  scrollToTop = () => {\n    const {scrollStep} = this\n    const {scrollIntervalTime} = this.props\n    this.intervalId = setInterval(scrollStep, scrollIntervalTime)\n  }\n\n  handleScroll = halfHeight => {\n    const {scrollTop} = this.container\n    const {show} = this.state\n\n    if (scrollTop > halfHeight) {\n      if (!show) this.setState({show: true})\n    } else {\n      if (show) this.setState({show: false, hover: false})\n    }\n  }\n\n  hoverButton = e => {\n    this.setState({hover: true})\n  }\n\n  unhoverButton = e => {\n    this.setState({hover: false})\n  }\n\n  componentDidMount() {\n    this.container = getTarget(this.props.refContainer)\n\n    const {handleScroll} = this\n    const {scrollHeight, clientHeight} = this.container\n    const halfHeight = Math.floor((scrollHeight - clientHeight) / 2)\n\n    this.container.addEventListener(\n      'scroll',\n      handleScroll.bind(this, halfHeight)\n    )\n  }\n\n  componentWillUnmount() {\n    const {handleScroll, intervalId} = this\n    clearInterval(intervalId)\n    this.container.removeEventListener('scroll', handleScroll)\n  }\n\n  render() {\n    const {scrollToTop, hoverButton, unhoverButton} = this\n    const {iconTop: IconTop, textTop, style} = this.props\n    const {show, hover} = this.state\n    return (\n      <button\n        title=\"Back to top\"\n        className={cx(\n          BASE_CLASS,\n          `${BASE_CLASS}--${style}`,\n          show !== null && CLASS_READY,\n          show ? CLASS_SHOW : CLASS_HIDE,\n          hover && CLASS_HOVER\n        )}\n        onMouseOver={hoverButton}\n        onMouseOut={unhoverButton}\n        onClick={scrollToTop}\n      >\n        {IconTop && (\n          <span className={CLASS_ICON}>\n            <IconTop />\n          </span>\n        )}\n        {textTop && <span className={CLASS_TEXT}>{textTop}</span>}\n      </button>\n    )\n  }\n}\n\nAtomBackToTop.displayName = 'AtomBackToTop'\n\nAtomBackToTop.propTypes = {\n  /** Icon (component) to be displayed */\n  iconTop: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  /** Text to be displayed */\n  textTop: PropTypes.string,\n\n  /** Number of pixels which will be scrolled on every step */\n  scrollSteps: PropTypes.number,\n\n  /** Time in ms which will be scrolled a step */\n  scrollIntervalTime: PropTypes.number,\n\n  /** Container to be scrolled. Can be a selector, or a React ref object */\n  refContainer: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n  /**\n   * Styles\n   *  DARK \u2192 'dark'\n   *  LIGHT \u2192'light'\n   */\n  style: PropTypes.oneOf(Object.values(STYLES))\n}\n\nAtomBackToTop.defaultProps = {\n  refContainer: document.body,\n  style: STYLES.DARK,\n  scrollIntervalTime: 50,\n  scrollSteps: 100\n}\n\nexport {STYLES as backToTopStyles}\nexport default AtomBackToTop\n"}}]);