(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{jLZr:function(n,e){n.exports="import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nconst STATUSES = {\n  ACTIVE: 'active',\n  UPLOAD: 'upload',\n  SUCCESS: 'success',\n  ERROR: 'error'\n}\n\nconst BASE_CLASS = 'sui-AtomUpload'\nconst CLASS_BLOCK_TEXT = `${BASE_CLASS}-blockText`\nconst CLASS_BLOCK_TEXT_MAIN = `${CLASS_BLOCK_TEXT}-main`\nconst CLASS_BLOCK_TEXT_SECONDARY = `${CLASS_BLOCK_TEXT}-secondary`\n\nconst capitalize = text => text[0].toUpperCase() + text.substr(1)\n\nclass AtomUpload extends PureComponent {\n  state = {\n    Dropzone: null\n  }\n\n  loadAsyncReactDropzone() {\n    require.ensure(\n      [],\n      require => {\n        const Dropzone = require('react-dropzone').default\n        this.setState({Dropzone})\n      },\n      'react-dropzone'\n    )\n  }\n\n  componentDidMount() {\n    this.loadAsyncReactDropzone()\n  }\n\n  onDrop = files => {\n    const {onFilesSelection} = this.props\n    onFilesSelection && onFilesSelection(files)\n  }\n\n  renderStatusBlock(status) {\n    const classNameIcon = `${BASE_CLASS}-icon${capitalize(status)}`\n    const IconStatus = this.props[`icon${capitalize(status)}`]\n    const textStatus = this.props[`text${capitalize(status)}`]\n    const {textExplanation} = this.props\n    return (\n      <div\n        className={cx(BASE_CLASS, `${BASE_CLASS}--${status}`)}\n        onClick={this.handleClick}\n      >\n        <span className={classNameIcon}>{IconStatus}</span>\n        <div className={CLASS_BLOCK_TEXT}>\n          <h4 className={CLASS_BLOCK_TEXT_MAIN}>{textStatus}</h4>\n          {status === STATUSES.ACTIVE &&\n            textExplanation && (\n              <p className={CLASS_BLOCK_TEXT_SECONDARY}>{textExplanation}</p>\n            )}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    const {status} = this.props\n    const {Dropzone} = this.state\n    const {onDrop} = this\n\n    if (Object.values(STATUSES).includes(status)) {\n      return (\n        Dropzone && (\n          <Dropzone\n            className={`${BASE_CLASS}-dropzone`}\n            disabled={status !== STATUSES.ACTIVE}\n            onDrop={onDrop}\n          >\n            {this.renderStatusBlock(status)}\n          </Dropzone>\n        )\n      )\n    }\n  }\n}\n\nAtomUpload.displayName = 'AtomUpload'\n\nAtomUpload.propTypes = {\n  /** Icon (component) to be displayed on active status */\n  iconActive: PropTypes.oneOfType([PropTypes.element, PropTypes.func]), // eslint-disable-line react/no-unused-prop-types\n\n  /** Icon (component) to be displayed on upload status */\n  iconUpload: PropTypes.oneOfType([PropTypes.element, PropTypes.func]), // eslint-disable-line react/no-unused-prop-types\n\n  /** Icon (component) to be displayed on success status */\n  iconSuccess: PropTypes.oneOfType([PropTypes.element, PropTypes.func]), // eslint-disable-line react/no-unused-prop-types\n\n  /** Icon (component) to be displayed on error status */\n  iconError: PropTypes.oneOfType([PropTypes.element, PropTypes.func]), // eslint-disable-line react/no-unused-prop-types\n\n  /** Text to be displayed on error status */\n  textActive: PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n\n  /** Text to be displayed on upload status */\n  textUpload: PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n\n  /** Text to be displayed on success status */\n  textSuccess: PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n\n  /** Text to be displayed on error status */\n  textError: PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n\n  /** Text to be displayed as explanation on active status */\n  textExplanation: PropTypes.string,\n\n  /**\n   * Status of the upload\n   *  ACTIVE \u2192 'active'\n   *  UPLOAD \u2192'upload'\n   *  SUCCESS \u2192 'success'\n   *  ERROR \u2192 'error'\n   */\n  status: PropTypes.oneOf(Object.values(STATUSES)).isRequired,\n\n  /** Callback to be called (with files selected) when there`s a file selection (via click or drag & drop) */\n  onFilesSelection: PropTypes.func\n}\n\nexport {STATUSES as uploadStatuses}\nexport default AtomUpload\n"}}]);