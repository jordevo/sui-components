(window.webpackJsonp=window.webpackJsonp||[]).push([[236],{MYKc:function(n,e){n.exports='/* eslint-disable react/prop-types, no-unused-vars, no-console */\n\nconst ErrorIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><g id="b1ecb616-50e4-4ef2-b242-520a10daccd0" data-name="Layer 2"><g id="a2656784-54b8-454e-b8cb-7a1e3d1f894e" data-name="icons-fill-download"><path d="M13.42,12l4.79-4.8A1,1,0,1,0,16.8,5.79L12,10.58,7.21,5.79a1,1,0,0,0-1.41,0,1,1,0,0,0,0,1.41L10.59,12,5.8,16.79a1,1,0,0,0,.7,1.71,1,1,0,0,0,.71-.3L12,13.41l4.8,4.79a1,1,0,0,0,.7.3,1,1,0,0,0,.71-1.71Z"/><path d="M0,0H24V24H0Z" fill="none"/></g></g></svg>)\n\nclass StaticWithAnimation extends React.Component {\n\n  static defaultProps = {\n    type: "line"\n  }\n\n  constructor() {\n    super()\n    this.state = {\n      percentage: 0\n    }\n    this.timeoutId = null\n  }\n\n  componentDidMount() {\n    const {percentage} = this.props\n    this.timeoutId = setTimeout(() => {\n      this.setState({percentage})\n    }, 1000)\n  }\n\n  componentWillUnount() {\n    clearTimeout(this.timeoutId)\n  }\n\n  render() {\n    const {percentage} = this.state\n    const {type} = this.props\n    return (\n      <div style={{background: \'white\', padding: \'10px\'}} >\n        <AtomProgressBar {...this.props} type={type} percentage={percentage} />\n      </div>\n    )\n  }\n}\n\nclass DynamicProgressBar extends React.Component {\n  static defaultProps = {\n    topPercentage: 100,\n    type: "line"\n  }\n\n  constructor() {\n    super()\n    this.state = {\n      percentage: 0\n    }\n    this.intervalId = null\n  }\n\n  handleClick = () => {\n    const {intervalTime} = this.props\n    const {setProgress} = this\n    this.setState(\n      {\n        percentage: 0\n      },\n      () => {\n        this.intervalId = setInterval(setProgress, intervalTime)\n      }\n    )\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId)\n  }\n\n  setProgress = () => {\n    const {percentage} = this.state\n    let {step, topPercentage} = this.props\n    if (!step) step = Math.ceil(Math.random() * (topPercentage - percentage))\n    if (percentage < topPercentage) {\n      this.setState({\n        percentage: percentage + step\n      })\n    } else {\n      clearInterval(this.intervalId)\n    }\n  }\n\n  render() {\n    const {percentage} = this.state\n    const {intervalTime, step, type, ...props} = this.props\n    return (\n      <div style={{background: \'white\', padding: \'10px\'}} >\n        <button style={{marginBottom: \'10px\', display:\'block\'}} onClick={this.handleClick}>\n          Start Progress\n        </button>\n        <AtomProgressBar percentage={percentage} type={type} {...props} />\n      </div>\n    )\n  }\n}\n\nclass InputRangeProgressBar extends React.Component {\n  static defaultProps = {\n    topPercentage: 100,\n    type: "line"\n  }\n\n  constructor() {\n    super()\n    this.inputRangeRef = React.createRef()\n    this.state = {\n      percentage: 0\n    }\n  }\n\n  handleInputRange = (e) => {\n    const val = this.inputRangeRef.current.value\n    this.setState({percentage: parseInt(val)})\n\n  }\n\n  setProgress = () => {\n    const {percentage} = this.state\n    let {step, topPercentage} = this.props\n    if (!step) step = Math.ceil(Math.random() * (topPercentage - percentage))\n    if (percentage < topPercentage) {\n      this.setState({\n        percentage: percentage + step\n      })\n    } else {\n      clearInterval(this.intervalId)\n    }\n  }\n\n  render() {\n    const {percentage} = this.state\n    const {step, type, ...props} = this.props\n    return (\n      <div style={{background: \'white\', padding: \'10px\'}} >\n        <input ref={this.inputRangeRef} style={{marginBottom: \'10px\', display:\'block\'}} onChange={this.handleInputRange} type="range" min="0" max="100" value={this.state.percentage} step={step}/>\n        <AtomProgressBar percentage={percentage} type={type} {...props}/>\n      </div>\n    )\n  }\n}\n\nconst styleSection = {\n  maxWidth: \'500px\'\n}\n\nreturn (\n  <div>\n    <h1>AtomLineProgressBar</h1>\n\n    <div style={styleSection}>\n      <h2>Dynamic</h2>\n      <h4 style={{marginBottom: \'2px\'}} >Unique value with animation</h4>\n      {/* <DynamicProgressBar topPercentage={65} step={65}  isAnimatedOnChange /> */}\n      <StaticWithAnimation percentage={25} isAnimatedOnChange/>\n      <h4 style={{marginBottom: \'2px\'}} >steps: random</h4>\n      <DynamicProgressBar intervalTime={1000} indicatorTotal isAnimatedOnChange />\n      <h4 style={{marginBottom: \'2px\'}} >steps: 25</h4>\n      <DynamicProgressBar intervalTime={1000} step={25} isAnimatedOnChange />\n      <h4 style={{marginBottom: \'2px\'}} >steps: 1 (smooth)</h4>\n      <DynamicProgressBar intervalTime={1000 / 60} step={1} />\n    </div>\n\n    <div style={styleSection}>\n      <h2>Basic</h2>\n      <AtomProgressBar percentage={25} />\n      <h2>Manual</h2>\n      <InputRangeProgressBar step={1} />\n    </div>\n\n    <div style={styleSection}>\n      <h2>Indicator Bottom</h2>\n      <AtomProgressBar percentage={25} indicatorBottom />\n    </div>\n\n    <div style={styleSection}>\n      <h2>Indicator Total</h2>\n      <AtomProgressBar percentage={25} indicatorTotal />\n    </div>\n\n    <h1>AtomCircleProgressBar</h1>\n\n    <div style={styleSection}>\n      <h2>Dynamic</h2>\n      <h4 style={{marginBottom: \'2px\'}} >Unique value with animation</h4>\n      {/* <DynamicProgressBar topPercentage={65} step={65}  type="circle" isAnimatedOnChange /> */}\n      <StaticWithAnimation percentage={25} type="circle" isAnimatedOnChange/>\n      <h4 style={{marginBottom: \'2px\'}} >steps: random</h4>\n      <DynamicProgressBar intervalTime={1000} type="circle" indicatorTotal isAnimatedOnChange />\n      <h4 style={{marginBottom: \'2px\'}} >steps: 25</h4>\n      <DynamicProgressBar intervalTime={1000} type="circle" step={25} isAnimatedOnChange />\n      <h4 style={{marginBottom: \'2px\'}} >steps: 1 (smooth)</h4>\n      <DynamicProgressBar intervalTime={1000/60} type="circle" step={1} />\n    </div>\n\n    <div style={styleSection}>\n      <h2>Basic</h2>\n      <div style={{background: \'white\', padding: \'10px\'}} >\n        <AtomProgressBar percentage={25} type="circle" />\n      </div>\n      <h2>With Error</h2>\n      <h3>Large</h3>\n      <div style={{background: \'white\', padding: \'10px\'}} >\n        <AtomProgressBar percentage={0} type="circle" status="error" errorIcon={<ErrorIcon/>}/>\n      </div>\n      <h3>Small</h3>\n      <div style={{background: \'white\', padding: \'10px\'}} >\n        <AtomProgressBar percentage={0} type="circle" status="error" size="small" errorIcon={<ErrorIcon/>}/>\n      </div>\n      <h2>Loading</h2>\n      <h3>Large</h3>\n      <div style={{background: \'white\', padding: \'10px\'}} >\n        <AtomProgressBar percentage={0} type="circle" status="loading"/>\n      </div>\n      <h3>Small</h3>\n      <div style={{background: \'white\', padding: \'10px\'}} >\n        <AtomProgressBar percentage={0} type="circle" size="small" status="loading"/>\n      </div>\n      <h2>Manual</h2>\n      <h3>Large</h3>\n      <InputRangeProgressBar type="circle" step={1} />\n      <h3>Small</h3>\n      <InputRangeProgressBar type="circle" size="small" step={1} />\n    </div>\n  </div>\n)\n'}}]);