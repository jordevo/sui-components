(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{vnio:function(n,e){n.exports="import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport AtomInput from '@s-ui/react-atom-input'\n\nimport handlersFactory from './handlersFactory'\n\nconst BASE_CLASS = 'sui-MoleculeDropdownOption'\nconst CLASS_CHECKBOX = `${BASE_CLASS}-checkbox`\nconst CLASS_TEXT = `${BASE_CLASS}-text`\nconst CLASS_DISABLED = `${BASE_CLASS}--disabled`\nconst CLASS_HIGHLIGHTED = `is-highlighted`\nconst CLASS_HIGHLIGHTED_MARK = `${BASE_CLASS}-mark`\n\nconst MoleculeDropdownOption = ({\n  children,\n  selected,\n  checkbox,\n  disabled,\n  highlightQuery,\n  onSelectKey,\n  onSelect,\n  innerRef,\n  value\n}) => {\n  const className = cx(BASE_CLASS, {\n    [CLASS_CHECKBOX]: checkbox,\n    [CLASS_DISABLED]: disabled,\n    'is-selected': selected\n  })\n\n  const {handleClick, handleKeyDown, handleFocus} = handlersFactory({\n    disabled,\n    value,\n    onSelectKey,\n    onSelect\n  })\n\n  const highlightOption = option => {\n    if (typeof option !== 'string') return option\n    const regExpHighlight = new RegExp(highlightQuery, 'gi')\n    return option.replace(\n      regExpHighlight,\n      `<mark class=\"${cx(CLASS_HIGHLIGHTED_MARK, CLASS_HIGHLIGHTED)}\">$&</mark>`\n    )\n  }\n\n  const handleInnerFocus = ev => {\n    ev.preventDefault()\n    innerRef.current.focus()\n  }\n\n  return (\n    <li\n      ref={innerRef}\n      tabIndex=\"0\"\n      className={className}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      onFocus={handleFocus}\n    >\n      {checkbox && (\n        <AtomInput\n          type=\"checkbox\"\n          checked={selected}\n          disabled={disabled}\n          onFocus={handleInnerFocus}\n        />\n      )}\n      {highlightQuery ? (\n        <span\n          onFocus={handleInnerFocus}\n          dangerouslySetInnerHTML={{__html: highlightOption(children)}}\n          className={CLASS_TEXT}\n        />\n      ) : (\n        <span onFocus={handleInnerFocus} className={CLASS_TEXT}>\n          {children}\n        </span>\n      )}\n    </li>\n  )\n}\n\nMoleculeDropdownOption.displayName = 'MoleculeDropdownOption'\n\nMoleculeDropdownOption.propTypes = {\n  /** option value */\n  value: PropTypes.string.isRequired,\n\n  /** Content to be included in the option */\n  children: PropTypes.node,\n\n  /** Contains checkbox */\n  checkbox: PropTypes.bool,\n\n  /** Is disabled */\n  disabled: PropTypes.bool,\n\n  /** onSelect callback (ev, {value}) */\n  onSelect: PropTypes.func,\n\n  /** Is initial selected */\n  selected: PropTypes.bool,\n\n  /** Text to be highlighted in the option text if found */\n  highlightQuery: PropTypes.string,\n\n  /* key to provoke the onClick callback. Valid any value defined here \u2192 https://www.w3.org/TR/uievents-key/#named-key-attribute-values */\n  onSelectKey: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /** Custom ref handler that will be assigned to the \"target\" element */\n  innerRef: PropTypes.object\n}\n\nMoleculeDropdownOption.defaultProps = {\n  checkbox: false,\n  disabled: false,\n  onSelect: () => {},\n  selected: false,\n  onSelectKey: 'Enter',\n  innerRef: React.createRef()\n}\n\nexport default MoleculeDropdownOption\nexport {handlersFactory}\n"}}]);