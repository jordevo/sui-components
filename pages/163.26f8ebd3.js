(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{FSTY:function(e,n){e.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nimport {moleculeDropdownListSizes as SIZES} from '@s-ui/react-molecule-dropdown-list'\n\nimport MoleculeAutosuggestSingleSelection from './components/SingleSelection'\nimport MoleculeAutosuggestMultipleSelection from './components/MultipleSelection'\n\nimport {withOpenToggle} from '@s-ui/hoc'\nimport {getTarget} from '@s-ui/js/lib/react'\nimport {getCurrentElementFocused} from '@s-ui/js/lib/dom'\n\nconst BASE_CLASS = `sui-MoleculeAutosuggest`\nconst CLASS_FOCUS = `${BASE_CLASS}--focus`\n\nconst getIsTypeableKey = key => {\n  const keysEdit = [\n    'Backspace',\n    'Enter',\n    'Meta',\n    'Shift',\n    'ArrowLeft',\n    'ArrowRight'\n  ]\n  return key.length === 1 || keysEdit.includes(key)\n}\n\nclass MoleculeAutosuggest extends Component {\n  refMoleculeAutosuggest =\n    this.props.refMoleculeAutosuggest || React.createRef()\n  refsMoleculeAutosuggestOptions = []\n  refMoleculeAutosuggestInput = React.createRef()\n  state = {\n    focus: false\n  }\n\n  get extendedChildren() {\n    const {children, keysSelection} = this.props // eslint-disable-line react/prop-types\n    const {refsMoleculeAutosuggestOptions} = this\n    return React.Children.toArray(children)\n      .filter(Boolean)\n      .map((child, index) => {\n        refsMoleculeAutosuggestOptions[index] = React.createRef()\n        return React.cloneElement(child, {\n          innerRef: refsMoleculeAutosuggestOptions[index],\n          onSelectKey: keysSelection\n        })\n      })\n  }\n\n  get className() {\n    const {focus} = this.state\n    return cx(BASE_CLASS, {[CLASS_FOCUS]: focus})\n  }\n\n  closeList = ev => {\n    const {onToggle, onChange, multiselection} = this.props\n    const {\n      refMoleculeAutosuggest: {current: domMoleculeAutosuggest}\n    } = this\n    onToggle(ev, {isOpen: false})\n    if (multiselection) onChange(ev, {value: ''})\n    domMoleculeAutosuggest.focus()\n    ev.preventDefault()\n    ev.stopPropagation()\n  }\n\n  focusFirstOption = (ev, {options}) => {\n    if (options[0]) options[0].focus()\n    ev.preventDefault()\n    ev.stopPropagation()\n  }\n\n  handleKeyDown = ev => {\n    ev.persist()\n    const {isOpen, keysCloseList, keysSelection} = this.props\n    const {\n      refsMoleculeAutosuggestOptions,\n      refMoleculeAutosuggestInput: {current: domInnerInput},\n      refMoleculeAutosuggest: {current: domMoleculeAutosuggest},\n      closeList,\n      focusFirstOption\n    } = this\n    const {key} = ev\n    const options = refsMoleculeAutosuggestOptions.map(getTarget)\n\n    const isTypeableKey = getIsTypeableKey(key)\n    const isSelectionKey = keysSelection.includes(key)\n\n    if (isTypeableKey) {\n      if (!isSelectionKey) domInnerInput.focus()\n    } else domMoleculeAutosuggest.focus()\n\n    if (isOpen) {\n      const currentElementFocused = getCurrentElementFocused()\n      const isSomeOptionFocused = [...options].includes(currentElementFocused)\n      if (keysCloseList.includes(key)) closeList(ev)\n      else if (key === 'ArrowDown' && !isSomeOptionFocused)\n        focusFirstOption(ev, {options})\n      else if (isSomeOptionFocused) this.handleFocusIn(ev)\n    }\n  }\n\n  handleFocusIn = ev => {\n    this.setState({focus: true})\n  }\n\n  handleFocusOut = ev => {\n    ev.persist()\n    const {\n      refsMoleculeAutosuggestOptions,\n      refMoleculeAutosuggestInput: {current: domInnerInput},\n      closeList\n    } = this\n    const options = refsMoleculeAutosuggestOptions.map(getTarget)\n    const {isOpen} = this.props\n    setTimeout(() => {\n      const currentElementFocused = getCurrentElementFocused()\n      const focusOutFromOutside = ![domInnerInput, ...options].includes(\n        currentElementFocused\n      )\n      if (focusOutFromOutside && isOpen) closeList(ev)\n    }, 1)\n    this.setState({focus: false})\n  }\n\n  handleInputKeyDown = ev => {\n    const {key} = ev\n    if (key !== 'ArrowDown') ev.stopPropagation()\n  }\n\n  render() {\n    const {multiselection, ...props} = this.props\n    const {\n      className,\n      handleKeyDown,\n      extendedChildren,\n      refMoleculeAutosuggest,\n      refMoleculeAutosuggestInput,\n      handleFocusIn,\n      handleFocusOut,\n      handleInputKeyDown\n    } = this\n\n    return (\n      <div\n        ref={refMoleculeAutosuggest}\n        tabIndex=\"0\"\n        className={className}\n        onKeyDown={handleKeyDown}\n        onFocus={handleFocusIn}\n        onBlur={handleFocusOut}\n      >\n        {multiselection ? (\n          <MoleculeAutosuggestMultipleSelection\n            {...props}\n            onInputKeyDown={handleInputKeyDown}\n            refMoleculeAutosuggest={refMoleculeAutosuggest}\n            innerRefInput={refMoleculeAutosuggestInput}\n          >\n            {extendedChildren}\n          </MoleculeAutosuggestMultipleSelection>\n        ) : (\n          <MoleculeAutosuggestSingleSelection\n            {...props}\n            onInputKeyDown={handleInputKeyDown}\n            refMoleculeAutosuggest={refMoleculeAutosuggest}\n            innerRefInput={refMoleculeAutosuggestInput}\n          >\n            {extendedChildren}\n          </MoleculeAutosuggestSingleSelection>\n        )}\n      </div>\n    )\n  }\n}\n\nMoleculeAutosuggest.propTypes = {\n  /** if select accept single value or multiple values */\n  multiselection: PropTypes.bool,\n\n  /** value selected */\n  value: PropTypes.any,\n\n  /* list of values displayed as tags */\n  tags: PropTypes.array,\n\n  /** list of values to be displayed on the select */\n  options: PropTypes.array,\n\n  /** if list of options is displayed or not */\n  isOpen: PropTypes.bool,\n\n  /** callback when arrow up/down is clicked \u2192 to show/hide list of options */\n  onToggle: PropTypes.func,\n\n  /* callback to be called with every update of the list of tags */\n  onChangeTags: PropTypes.func,\n\n  /* callback to be called with every update of the input value */\n  onChange: PropTypes.func,\n\n  /** Icon for closing (removing) tags */\n  iconCloseTag: PropTypes.node,\n\n  /** Icon for closing (removing) tags */\n  iconClear: PropTypes.node,\n\n  /** size (height) of the list */\n  size: PropTypes.oneOf(Object.values(SIZES)),\n\n  /** list of key identifiers that will trigger a selection */\n  keysSelection: PropTypes.array,\n\n  /** list of key identifiers that will close the list */\n  keysCloseList: PropTypes.array,\n\n  /* object generated w/ Reacte.createRef method to get a DOM reference of internal input */\n  refMoleculeAutosuggest: PropTypes.object\n}\n\nMoleculeAutosuggest.defaultProps = {\n  onChange: () => {},\n  onToggle: () => {},\n  keysSelection: [' ', 'Enter'],\n  keysCloseList: ['Escape']\n}\n\nexport default withOpenToggle(MoleculeAutosuggest)\nexport {SIZES as MoleculeAutosuggestDropdownListSizes}\n"}}]);