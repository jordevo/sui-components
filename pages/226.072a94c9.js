(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{qsqy:function(n,e){n.exports="import React from 'react'\nimport PropTypes from 'prop-types'\nimport AtomImage from '@s-ui/react-atom-image'\nimport cx from 'classnames'\n\nconst BASE_CLASS = 'sui-MoleculeThumbnail'\nconst CAPTION_CLASS = `${BASE_CLASS}-caption`\nconst LINK_CLASS = `${BASE_CLASS}-link`\nconst CONTAINER_IMAGE = `${BASE_CLASS}-containerImage`\n\nconst SIZES = {\n  LARGE: 'large',\n  MEDIUM: 'medium',\n  SMALL: 'small',\n  XSMALL: 'xsmall'\n}\n\nconst RATIOS = {\n  '1:1': '1-1',\n  '4:3': '4-3',\n  '16:9': '16-9'\n}\n\nconst SHAPES = {\n  SQUARED: 'squared',\n  CIRCLED: 'circled'\n}\n\nconst MoleculeThumbnail = props => {\n  const {\n    href,\n    size,\n    ratio,\n    shape,\n    target,\n    captionText,\n    linkFactory: Link,\n    ...propsImage\n  } = props\n\n  const ImageCaption = () => (\n    <div>\n      <div className={cx(`${CONTAINER_IMAGE}`, `${CONTAINER_IMAGE}--${ratio}`)}>\n        <AtomImage {...propsImage} />\n      </div>\n      {captionText && (\n        <figcaption className={CAPTION_CLASS}>{captionText}</figcaption>\n      )}\n    </div>\n  )\n\n  return (\n    <figure\n      className={cx(\n        `${BASE_CLASS}`,\n        `${BASE_CLASS}--${size}`,\n        `${BASE_CLASS}--${shape}`\n      )}\n    >\n      {href ? (\n        <Link\n          className={LINK_CLASS}\n          href={href}\n          target={target}\n          rel={target === '_blank' && 'noopener'}\n        >\n          <ImageCaption />\n        </Link>\n      ) : (\n        <ImageCaption />\n      )}\n    </figure>\n  )\n}\n\nMoleculeThumbnail.displayName = 'MoleculeThumbnail'\n\nMoleculeThumbnail.propTypes = {\n  /** Image source */\n  src: PropTypes.string.isRequired,\n\n  /** Image alt */\n  alt: PropTypes.string.isRequired,\n\n  /** Text shown at the bottom of the component */\n  captionText: PropTypes.string,\n\n  /** Image displayed (blurred) while the final image is being loaded */\n  placeholder: PropTypes.string,\n\n  /** Image (wireframe, skeleton) displayed (not blurred) while the final image is being loaded */\n  skeleton: PropTypes.string,\n\n  /** Spinner (component) displayed while the final image is being loaded */\n  spinner: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  /** Icon (component) to be displayed in an Error Box when the image cannot be loaded */\n  errorIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  /** Text to be displayed in an Error Box when the image cannot be loaded */\n  errorText: PropTypes.string,\n\n  /** Function to be called when the image cannot be loaded  */\n  onError: PropTypes.func,\n\n  /** Function to be called when the image completed its loading  */\n  onLoad: PropTypes.func,\n\n  /** Anchor link */\n  href: PropTypes.string,\n\n  /** Define the target attribute('_self', '_blank', '_parent' or '_top') */\n  target: PropTypes.oneOf(['_self', '_blank', '_parent', '_top']),\n\n  /** Define the size (LARGE, MEDIUM, SMALL or XSMALL) */\n  size: PropTypes.oneOf(Object.values(SIZES)),\n\n  /** Define the shape (SQUARED or CIRCLED) */\n  shape: PropTypes.oneOf(Object.values(SHAPES)),\n\n  /** Define the ratio ('1:1', '4:3', '16:9') */\n  ratio: PropTypes.oneOf(Object.values(RATIOS)),\n\n  /** Factory used to create navigation links */\n  linkFactory: PropTypes.func\n}\n\nMoleculeThumbnail.defaultProps = {\n  target: '_blank',\n  size: SIZES.MEDIUM,\n  shape: SHAPES.SQUARED,\n  ratio: RATIOS['1:1'],\n  linkFactory: ({children, ...rest} = {}) => <a {...rest}>{children}</a>\n}\n\nexport default MoleculeThumbnail\n\nexport {\n  SIZES as moleculeThumbnailSize,\n  RATIOS as moleculeThumbnailRatio,\n  SHAPES as moleculeThumbnailShape\n}\n"}}]);