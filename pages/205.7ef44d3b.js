(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{dvfD:function(n,e){n.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\n\nimport MoleculeButtonGroup from '@s-ui/react-molecule-button-group'\nimport AtomButtom from '@schibstedspain/sui-atom-button'\n\nimport * as pagination from './helpers/pagination'\nimport {\n  isValidPage,\n  isValidTotalPages,\n  isValidShowPages\n} from './customPropTypes'\n\nconst BASE_CLASS = 'sui-MoleculePagination'\nconst CLASS_PREV_BUTTON_ICON = 'sui-MoleculePagination-prevButtonIcon'\nconst CLASS_NEXT_BUTTON_ICON = 'sui-MoleculePagination-nextButtonIcon'\n\n// eslint-disable-next-line react/prop-types\nconst PageButton = ({onSelectPage, page, ...props}) => {\n  const _onSelectPage = e => {\n    onSelectPage(e, {page})\n  }\n  return <AtomButtom onClick={_onSelectPage} {...props} />\n}\n\nclass MoleculePagination extends Component {\n  handleClickNext = e => {\n    const {onSelectNext, ...props} = this.props\n    const page = pagination.nextPage(props)\n    onSelectNext(e, {page})\n  }\n\n  handleClickPrev = e => {\n    const {onSelectPrev, ...props} = this.props\n    const page = pagination.prevPage(props)\n    onSelectPrev(e, {page})\n  }\n\n  render() {\n    const {\n      page,\n      totalPages,\n      showPages,\n      prevButtonText,\n      prevButtonIcon: PrevButtonIcon,\n      nextButtonText,\n      nextButtonIcon: NextButtonIcon,\n      onSelectPage,\n      compressed,\n      hideDisabled\n    } = this.props\n\n    const paramsPagination = {\n      page,\n      totalPages,\n      showPages\n    }\n\n    const range = pagination.range(paramsPagination)\n    const nextPage = pagination.nextPage(paramsPagination)\n    const prevPage = pagination.prevPage(paramsPagination)\n\n    const isHidePrev = hideDisabled && !prevPage\n    const isHideNext = hideDisabled && !nextPage\n\n    return (\n      <div className={BASE_CLASS}>\n        <MoleculeButtonGroup type=\"tertiary\">\n          {!isHidePrev && (\n            <AtomButtom onClick={this.handleClickPrev} disabled={!prevPage}>\n              {PrevButtonIcon && (\n                <span className={CLASS_PREV_BUTTON_ICON}>\n                  <PrevButtonIcon />\n                </span>\n              )}\n              {prevButtonText}\n            </AtomButtom>\n          )}\n          {compressed ? (\n            <PageButton page={page} focused onSelectPage={onSelectPage}>\n              {page}\n            </PageButton>\n          ) : (\n            range.map(pageRange => (\n              <PageButton\n                key={pageRange}\n                page={pageRange}\n                focused={pageRange === page}\n                onSelectPage={onSelectPage}\n              >\n                {pageRange}\n              </PageButton>\n            ))\n          )}\n          {!isHideNext && (\n            <AtomButtom onClick={this.handleClickNext} disabled={!nextPage}>\n              {nextButtonText}\n              {NextButtonIcon && (\n                <span className={CLASS_NEXT_BUTTON_ICON}>\n                  <NextButtonIcon />\n                </span>\n              )}\n            </AtomButtom>\n          )}\n        </MoleculeButtonGroup>\n      </div>\n    )\n  }\n}\n\nMoleculePagination.displayName = 'MoleculePagination'\n\nMoleculePagination.propTypes = {\n  /** Total number of pages */\n  totalPages: isValidTotalPages,\n\n  /** Current page selected */\n  page: isValidPage,\n\n  /** Number of pages to be displayed in the range (10 by default) */\n  showPages: isValidShowPages,\n\n  /** If the pagination should be displayed in compressed mode or not */\n  compressed: PropTypes.bool,\n\n  /** Text to be displayed on the previous button */\n  prevButtonText: PropTypes.string,\n\n  /** Icon to be displayed on the previous button */\n  prevButtonIcon: PropTypes.any,\n\n  /** Text to be displayed on the next button */\n  nextButtonText: PropTypes.string,\n\n  /** Icon to be displayed on the next button */\n  nextButtonIcon: PropTypes.any,\n\n  /** Callback that will be called with (event, page) on prev button click */\n  onSelectPrev: PropTypes.func,\n\n  /** Callback that will be called with (event, page) on next button click */\n  onSelectNext: PropTypes.func,\n\n  /** Callback that will be called with (event, page) on each page button click */\n  onSelectPage: PropTypes.func,\n\n  /** Hide Previous/Next buttons if they're disabled */\n  hideDisabled: PropTypes.bool\n}\n\nMoleculePagination.defaultProps = {\n  showPages: 10,\n  compressed: false,\n  prevButtonText: 'Previous',\n  nextButtonText: 'Next',\n  onSelectPrev: () => {},\n  onSelectNext: () => {},\n  onSelectPage: () => {}\n}\n\nexport default MoleculePagination\n"}}]);