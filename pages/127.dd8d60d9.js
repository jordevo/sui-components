(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{Ywjf:function(n,o){n.exports="import React from 'react'\nimport PropTypes from 'prop-types'\nimport ColorPanel from './ColorPanel'\nimport ImagePanel, {\n  HORIZONTAL_ALIGNMENTS,\n  VERTICAL_ALIGNMENTS\n} from './ImagePanel'\nimport {COLORS, ALPHA} from './constants'\n\nconst isImagePanel = function({src}) {\n  return !!src\n}\n\nconst AtomPanel = function(props) {\n  return isImagePanel(props) ? (\n    <ImagePanel {...props} />\n  ) : (\n    <ColorPanel {...props} />\n  )\n}\n\nAtomPanel.displayName = 'AtomPanel'\n\nAtomPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  /**\n   * Background image\n   */\n  src: PropTypes.string,\n  /**\n   * Specify the type of alignment vertically\n   */\n  verticalAlign: PropTypes.oneOf(Object.values(VERTICAL_ALIGNMENTS)),\n  /**\n   * Specify the type of alignment horizontally\n   */\n  horizontalAlign: PropTypes.oneOf(Object.values(HORIZONTAL_ALIGNMENTS))\n}\n\nAtomPanel.defaultProps = {\n  horizontalAlign: HORIZONTAL_ALIGNMENTS.CENTER,\n  verticalAlign: VERTICAL_ALIGNMENTS.CENTER\n}\n\nexport default AtomPanel\nexport {\n  HORIZONTAL_ALIGNMENTS as atomPanelHorizontalAlign,\n  VERTICAL_ALIGNMENTS as atomPanelVerticalAlign,\n  COLORS as atomPanelColors,\n  ALPHA as atomPanelAlpha\n}\n"}}]);