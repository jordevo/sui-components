(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{Nevq:function(n,e){n.exports="import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Input, {inputSizes} from './Input'\nimport Password from './Password'\nimport Mask from './Mask'\n\nconst TYPES = {\n  DATE: 'date',\n  MASK: 'mask',\n  NUMBER: 'number',\n  PASSWORD: 'password',\n  SUI_PASSWORD: 'sui-password',\n  TEXT: 'text',\n  RADIO: 'radio',\n  CHECKBOX: 'checkbox',\n  TEL: 'tel',\n  EMAIL: 'email'\n}\n\nconst AtomInput = ({type, ...props}) => {\n  switch (type) {\n    case 'sui-password':\n      return <Password {...props} />\n    case 'mask':\n      return <Mask {...props} />\n    default:\n      return <Input {...props} type={type} />\n  }\n}\n\nAtomInput.propTypes = {\n  /** native types (text, date, ...), 'sui-password' */\n  type: PropTypes.oneOf(Object.values(TYPES)),\n\n  /** Left addon component, text,... */\n  leftAddon: PropTypes.any,\n\n  /** Right addon component, text,... */\n  rightAddon: PropTypes.any,\n\n  /** Left Icon */\n  leftIcon: PropTypes.node,\n\n  /** Left Icon */\n  rightIcon: PropTypes.node,\n\n  /** Left icon click callback */\n  onClickLeftIcon: PropTypes.func,\n\n  /** Right icon click callback */\n  onClickRightIcon: PropTypes.func,\n\n  /** Text to be shown in order to show the password on click */\n  pwShowLabel: PropTypes.string,\n\n  /** Text to be shown in order to hide the password on click */\n  pwHideLabel: PropTypes.string,\n\n  /** onBlur callback */\n  onBlur: PropTypes.func,\n\n  /** onChange callback */\n  onChange: PropTypes.func,\n\n  /** sets the name property of an element in the DOM */\n  name: PropTypes.string,\n\n  /** The DOM id global attribute. */\n  id: PropTypes.string,\n\n  /** A hint to the user of what can be entered in the control. The placeholder text must not contain carriage returns or line-feeds. */\n  placeholder: PropTypes.string,\n\n  /** This Boolean attribute prevents the user from interacting with the input */\n  disabled: PropTypes.bool,\n\n  /** 's' or 'm', default: 'm' */\n  size: PropTypes.oneOf(Object.values(inputSizes)),\n\n  /** width of input based in number of characters (native \"size\" attribute) */\n  charsSize: PropTypes.number,\n\n  /** specifies the maximum number of characters (native \"maxlength\" attribute) */\n  maxLength: PropTypes.number,\n\n  /** specifies whether or not an input field should have autocomplete enabled (on|off) */\n  autoComplete: PropTypes.string,\n\n  /** true = error, false = success, null = neutral */\n  errorState: PropTypes.bool,\n\n  /** value of the control */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n  /** mask object, see https://unmanner.github.io/imaskjs/ */\n  mask: PropTypes.object\n}\n\nAtomInput.displayName = 'AtomInput'\n\nexport default AtomInput\nexport {inputSizes}\n"}}]);