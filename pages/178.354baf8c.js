(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{pl7P:function(n,e){n.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nconst BASE_CLASS = 'sui-MoleculeCollapsible'\nconst CONTENT_CLASS = `${BASE_CLASS}-content`\nconst CONTAINER_BUTTON_CLASS = `${BASE_CLASS}-container`\nconst COLLAPSED_CLASS = 'is-collapsed'\nconst BUTTON_CLASS = `${BASE_CLASS}-btn`\nconst BUTTON_CONTENT_CLASS = `${BUTTON_CLASS}-content`\nconst ICON_CLASS = `${BASE_CLASS}-icon`\nconst MIN_HEIGHT = 100 // px\n\nclass MoleculeCollapsible extends Component {\n  constructor(props) {\n    super(props)\n    this.childrenContainer = React.createRef()\n    this.state = {collapsed: true, showButton: true, maxHeight: MIN_HEIGHT}\n  }\n\n  toggleCollapse = () => {\n    const {collapsed, showButton} = this.state\n    const {onClose, onOpen} = this.props\n    if (showButton) {\n      this.setState({collapsed: !collapsed})\n      ;(collapsed && onOpen()) || onClose()\n    }\n  }\n\n  componentDidMount() {\n    const offsetHeight = this.childrenContainer.current.offsetHeight\n    this.setState({\n      showButton: offsetHeight >= this.props.height,\n      maxHeight: offsetHeight\n    })\n  }\n\n  render() {\n    const {collapsed, showButton, maxHeight} = this.state\n    const {\n      children,\n      height,\n      icon,\n      showText,\n      hideText,\n      withGradient,\n      withTransition\n    } = this.props\n    const wrapperClassName = cx(`${BASE_CLASS}`, {\n      [`${BASE_CLASS}--withGradient`]: withGradient,\n      [COLLAPSED_CLASS]: collapsed\n    })\n    const iconClassName = cx(`${ICON_CLASS}`, {\n      [COLLAPSED_CLASS]: collapsed\n    })\n    const containerClassName = cx(`${CONTAINER_BUTTON_CLASS}`, {\n      [`${CONTAINER_BUTTON_CLASS}--withGradient`]: withGradient,\n      [COLLAPSED_CLASS]: collapsed\n    })\n    const contentClassName = cx(`${CONTENT_CLASS}`, {\n      [`${CONTENT_CLASS}--withTransition`]: withTransition\n    })\n    const containerHeight =\n      showButton && collapsed ? `${height}px` : `${maxHeight}px`\n\n    return (\n      <div className={wrapperClassName}>\n        <div\n          className={contentClassName}\n          style={{maxHeight: `${containerHeight}`}}\n        >\n          <div ref={this.childrenContainer}>{children}</div>\n        </div>\n        {showButton && (\n          <div className={containerClassName}>\n            <button\n              type=\"button\"\n              className={BUTTON_CLASS}\n              onClick={this.toggleCollapse}\n            >\n              <span className={BUTTON_CONTENT_CLASS} tabIndex=\"-1\">\n                {collapsed ? showText : hideText}\n                <span className={iconClassName}>{icon}</span>\n              </span>\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nMoleculeCollapsible.displayName = 'MoleculeCollapsible'\n\nMoleculeCollapsible.propTypes = {\n  /**\n   * Content to collapse\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Define the min height visible\n   */\n  height: PropTypes.number,\n  /**\n   * Icon to be added on the right of the content\n   */\n  icon: PropTypes.node.isRequired,\n  /**\n   * Text to show when content is collapsed\n   */\n  showText: PropTypes.string.isRequired,\n  /**\n   * Text to show when content is not collapsed\n   */\n  hideText: PropTypes.string.isRequired,\n  /**\n   * Activate/deactivate gradient\n   */\n  withGradient: PropTypes.bool,\n  /**\n   * Activate/deactivate transition\n   */\n  withTransition: PropTypes.bool,\n  /**\n   * On open callback\n   */\n  onOpen: PropTypes.func,\n  /**\n   * On close callback\n   */\n  onClose: PropTypes.func\n}\n\nMoleculeCollapsible.defaultProps = {\n  height: MIN_HEIGHT,\n  withGradient: true,\n  withTransition: true,\n  onOpen: () => {},\n  onClose: () => {}\n}\n\nexport default MoleculeCollapsible\n"}}]);