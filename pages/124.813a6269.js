(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{X1Da:function(n,e){n.exports="import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nconst CLASSNAME = 'sui-AtomLabel'\n\nconst TYPES = {\n  SUCCESS: 'success',\n  ERROR: 'error'\n}\n\nconst getClass = ({type, inline}) =>\n  cx(CLASSNAME, {\n    [`${CLASSNAME}--${type}`]: type,\n    [`${CLASSNAME}--inlineLeft`]: inline === 'left',\n    [`${CLASSNAME}--inlineRight`]: inline === 'right'\n  })\n\nconst AtomLabel = ({name, inline, text, optionalText, type, onClick}) => (\n  <label htmlFor={name} className={getClass({type, inline})} onClick={onClick}>\n    {text}\n    {optionalText && (\n      <span className=\"sui-AtomLabel-optionalText\">{optionalText}</span>\n    )}\n  </label>\n)\n\nAtomLabel.displayName = 'AtomLabel'\n\nAtomLabel.propTypes = {\n  /**\n   * used as for attribute. Must be the same as the form element id\n   */\n  name: PropTypes.string.isRequired,\n  /**\n   * The label itself\n   */\n  text: PropTypes.string.isRequired,\n  /**\n   * Allows label to be displayed inline to de left\n   */\n  inline: PropTypes.string,\n  /**\n   * The optional label text\n   */\n  optionalText: PropTypes.string,\n  /**\n   * Label type: 'success' or 'error', use AtomLabelTypes\n   */\n  type: PropTypes.oneOf(Object.values(TYPES)),\n\n  /** onClick event handler */\n  onClick: PropTypes.func\n}\n\nexport default AtomLabel\nexport {TYPES as AtomLabelTypes}\n"}}]);