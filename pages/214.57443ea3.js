(window.webpackJsonp=window.webpackJsonp||[]).push([[214],{Agp7:function(e,n){e.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nimport {moleculeDropdownListSizes as SIZES} from '@s-ui/react-molecule-dropdown-list'\n\nimport MoleculeSelectSingleSelection from './components/SingleSelection'\nimport MoleculeSelectMultipleSelection from './components/MultipleSelection'\n\nimport {withOpenToggle} from '@s-ui/hoc'\nimport {getTarget} from '@s-ui/js/lib/react'\nimport {getCurrentElementFocused} from '@s-ui/js/lib/dom'\n\nconst BASE_CLASS = `sui-MoleculeSelect`\nconst CLASS_FOCUS = `${BASE_CLASS}--focus`\nconst CLASS_DISABLED = `is-disabled`\n\nconst ERROR_STATES = {\n  ERROR: 'error',\n  SUCCESS: 'success'\n}\n\nconst getOptionData = children => {\n  const optionsData = {}\n  React.Children.forEach(children, child => {\n    const {children, value} = child.props\n    optionsData[value] = children\n  })\n  return optionsData\n}\n\nclass MoleculeSelect extends Component {\n  refMoleculeSelect = this.props.refMoleculeSelect || React.createRef()\n  refsMoleculeSelectOptions = []\n  state = {\n    focus: false,\n    optionsData: {}\n  }\n\n  static getDerivedStateFromProps({children}, state) {\n    const optionsData = getOptionData(children)\n    return {...state, optionsData}\n  }\n\n  componentDidMount() {\n    const {children} = this.props // eslint-disable-line react/prop-types\n    const optionsData = getOptionData(children)\n    this.setState({optionsData})\n  }\n\n  get extendedChildren() {\n    const {children, keysSelection} = this.props // eslint-disable-line react/prop-types\n    const {refsMoleculeSelectOptions} = this\n    return React.Children.toArray(children)\n      .filter(Boolean)\n      .map((child, index) => {\n        refsMoleculeSelectOptions[index] = React.createRef()\n        return React.cloneElement(child, {\n          innerRef: refsMoleculeSelectOptions[index],\n          onSelectKey: keysSelection\n        })\n      })\n  }\n\n  get className() {\n    const {focus} = this.state\n    const {disabled} = this.props\n    const {errorStateClass} = this\n    return cx(\n      BASE_CLASS,\n      {\n        [CLASS_FOCUS]: focus,\n        [CLASS_DISABLED]: disabled\n      },\n      errorStateClass\n    )\n  }\n\n  get errorStateClass() {\n    const {errorState} = this.props\n    if (errorState) return `${BASE_CLASS}--${ERROR_STATES.ERROR}`\n    if (errorState === false) return `${BASE_CLASS}--${ERROR_STATES.SUCCESS}`\n    return ''\n  }\n\n  closeList = ev => {\n    const {onToggle} = this.props\n    const {\n      refMoleculeSelect: {current: domMoleculeSelect}\n    } = this\n    onToggle(ev, {isOpen: false})\n    domMoleculeSelect.focus()\n    ev.preventDefault()\n    ev.stopPropagation()\n  }\n\n  focusFirstOption = (ev, {options}) => {\n    options[0].focus()\n    ev.preventDefault()\n    ev.stopPropagation()\n  }\n\n  handleToggle = ev => {\n    const {onToggle} = this.props\n    onToggle(ev, {})\n    ev.preventDefault()\n    ev.stopPropagation()\n  }\n\n  handleKeyDown = ev => {\n    ev.persist()\n    const {isOpen} = this.props\n    const {\n      refMoleculeSelect,\n      refsMoleculeSelectOptions,\n      closeList,\n      focusFirstOption,\n      handleToggle\n    } = this\n\n    const options = refsMoleculeSelectOptions.map(getTarget)\n    const domSourceEvent = ev.target\n    const domMoleculeSelect = refMoleculeSelect.current\n    if (!isOpen) {\n      if (['Enter', 'ArrowDown', 'ArrowUp'].includes(ev.key)) {\n        if (domSourceEvent === domMoleculeSelect) handleToggle(ev)\n        else closeList(ev)\n      }\n    } else {\n      const currentElementFocused = getCurrentElementFocused()\n      const isSomeOptionFocused = [...options].includes(currentElementFocused)\n      if (ev.key === 'Escape') closeList(ev)\n      if (ev.key === 'ArrowDown' && !isSomeOptionFocused)\n        focusFirstOption(ev, {options})\n    }\n  }\n\n  handleSelect = () => {\n    this.setState({focus: true})\n  }\n\n  handleFocusIn = () => {\n    const {disabled} = this.props\n    !disabled && this.setState({focus: true})\n  }\n\n  handleFocusOut = ev => {\n    ev.persist()\n    const {refsMoleculeSelectOptions, closeList} = this\n    const {isOpen} = this.props\n    const options = refsMoleculeSelectOptions.map(getTarget)\n    const firstOption = options[0]\n    setTimeout(() => {\n      const currentElementFocused = getCurrentElementFocused()\n      const isSomeOptionFocused = [...options].includes(currentElementFocused)\n      const isOptionListFocused = firstOption\n        ? currentElementFocused.isSameNode(firstOption.parentNode)\n        : false\n\n      if (!isSomeOptionFocused && !isOptionListFocused && isOpen) {\n        closeList(ev)\n      }\n    }, 1)\n    this.setState({focus: false})\n  }\n\n  render() {\n    const {multiselection, ..._props} = this.props\n    const {optionsData} = this.state\n    const {\n      className,\n      handleKeyDown,\n      extendedChildren,\n      refMoleculeSelect,\n      handleFocusIn,\n      handleFocusOut\n    } = this\n\n    return (\n      <div\n        ref={refMoleculeSelect}\n        tabIndex=\"0\"\n        className={className}\n        onKeyDown={handleKeyDown}\n        onFocus={handleFocusIn}\n        onBlur={handleFocusOut}\n      >\n        {multiselection ? (\n          <MoleculeSelectMultipleSelection\n            refMoleculeSelect={refMoleculeSelect}\n            optionsData={optionsData}\n            {..._props}\n          >\n            {extendedChildren}\n          </MoleculeSelectMultipleSelection>\n        ) : (\n          <MoleculeSelectSingleSelection\n            refMoleculeSelect={refMoleculeSelect}\n            optionsData={optionsData}\n            {..._props}\n          >\n            {extendedChildren}\n          </MoleculeSelectSingleSelection>\n        )}\n      </div>\n    )\n  }\n}\n\nMoleculeSelect.propTypes = {\n  /** The DOM id global attribute. */\n  id: PropTypes.string,\n\n  /** if select accept single value or multiple values */\n  multiselection: PropTypes.bool,\n\n  /** value selected */\n  value: PropTypes.any,\n\n  /** list of values to be displayed on the select */\n  options: PropTypes.array,\n\n  /** if list of options is displayed or not */\n  isOpen: PropTypes.bool,\n\n  /** callback when arrow up/down is clicked \u2192 to show/hide list of options */\n  onToggle: PropTypes.func,\n\n  /** callback to be triggered when value selected changes */\n  onChange: PropTypes.func,\n\n  /** Icon for closing (removing) tags */\n  iconCloseTag: PropTypes.node,\n\n  /** Icon for arrow in select (down direction when closed) */\n  iconArrowDown: PropTypes.node.isRequired,\n\n  /** size (height) of the list */\n  size: PropTypes.oneOf(Object.values(SIZES)),\n\n  /** list of key identifiers that will trigger a selection */\n  keysSelection: PropTypes.array,\n\n  /* object generated w/ Reacte.createRef method to get a DOM reference of internal input */\n  refMoleculeSelect: PropTypes.object,\n\n  /** true = error, false = success, null = neutral */\n  errorState: PropTypes.bool,\n\n  /** This Boolean attribute prevents the user from interacting with the select */\n  disabled: PropTypes.bool,\n\n  /** This Boolean attribute prevents the user from interacting with the input but without disabled styles  */\n  readOnly: PropTypes.bool\n}\n\nMoleculeSelect.defaultProps = {\n  disabled: false,\n  keysSelection: [' ', 'Enter'],\n  onChange: () => {},\n  onToggle: () => {},\n  readOnly: false\n}\n\nexport default withOpenToggle(MoleculeSelect)\nexport {SIZES as moleculeSelectDropdownListSizes}\n"}}]);