(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{"3H2S":function(n,e){n.exports="# MoleculeAutosuggest\n\n`MoleculeAutosuggest` is an input that will display a list of suggestions while values are entered\nIt allows Single and Multiple Selection\n\n## Installation\n\n```sh\n$ npm install @s-ui/react-molecule-autosuggest --save\n```\n\n## Usage\n\n```js\nimport MoleculeAutosuggest, { MoleculeAutosuggestDropdownListSizes } from '@s-ui/react-molecule-autosuggest'\nimport MoleculeAutosuggestOption from '@s-ui/react-molecule-dropdown-option'\n\nconst IconCloseTag = () => <span>x</span>  \nconst IconClear = () => <span>x</span>  \n\nconst suggestions = ['John','Johnny']\n```\n\n### Single Selection\n\n#### Basic usage\n```js\n <MoleculeAutosuggest\n  value={'Jo'}\n  placeholder=\"Select an option...\"\n  iconClear={<IconClose />}\n>\n  {suggestions.map((suggestion, i) => (\n    <MoleculeAutosuggestOption key={i} value={suggestion}>\n      {option}\n    </MoleculeAutosuggestOption>\n  ))}\n</MoleculeAutosuggest>\n```\n\n#### Large List\n```js\n<MoleculeAutosuggest\n  value={'Jo'}\n  placeholder=\"Select an option...\"\n  iconClear={<IconClose />}\n  size={MoleculeAutosuggestDropdownListSizes.LARGE}\n>\n  {suggestions.map((suggestion, i) => (\n    <MoleculeAutosuggestOption key={i} value={suggestion}>\n      {option}\n    </MoleculeAutosuggestOption>\n  ))}\n</MoleculeAutosuggest>\n```\n\n### Multiple Selection\n\n#### Basic usage\n```js\n<MoleculeAutosuggest\n  value={'Jo'}\n  placeholder=\"Select some options...\"\n  iconCloseTag={<IconCloseTag />}\n  iconClear={<IconClear />}\n  multiselection\n>\n  {suggestions.map((suggestion, i) => (\n    <MoleculeAutosuggestOption key={i} value={suggestion}>\n      {option}\n    </MoleculeAutosuggestOption>\n  ))}\n</MoleculeAutosuggest>\n```\n\n### Managing State\n\n#### Custom component from `MoleculeAutosuggest` that handle State\n\n`MoleculeAutosuggest` is a stateless component so to manage dynamic options we need to create a wrapper component that manages this and pass proper `props` and proper children (`MoleculeAutosuggestOption`) to `MoleculeAutosuggest`\n\nExample:\n\n```js\nimport React, {Component} from 'react'\n\nimport MoleculeAutosuggest from '@s-ui/react-molecule-autosuggest'\nimport MoleculeAutosuggestOption from '@s-ui/react-molecule-dropdown-option'\n\nimport {getAsyncCountriesFromQuery} from '../services'\n\nexport default class AutosuggestSingleWithAsyncOptions extends Component {\n  state = {value: '', options: []}\n\n  onChange = async (e, {value}) => {\n    const options = await getAsyncCountriesFromQuery({query: value})\n    this.setState({value, options})\n  }\n\n  render() {\n    const {options, value} = this.state\n    const {onChange, props} = this\n\n    return (\n      <MoleculeAutosuggest {...props} value={value} onChange={onChange}>\n        {options.map((option, i) => (\n          <MoleculeAutosuggestOption key={i} value={option}>\n            {option}\n          </MoleculeAutosuggestOption>\n        ))}\n      </MoleculeAutosuggest>\n    )\n  }\n}\n\n```\n\nso then, the `AutosuggestSingleWithAsyncOptions` can used in this way...\n\n```js\n  <AutosuggestSingleWithAsyncOptions iconClear={<IconClear />} />\n```\n\n#### Using an hoc like `withDynamicOptions`\n\nIt can be useful creating a hoc (like the one `withDynamicOptions` available in the demo) that combined with other hoc from `@s-ui/hoc` can be used to simplify the use of this component with dinamyc suggestions based on the `value`\n\n**`withDynamicOptions`**\n```js\nimport React, {Component} from 'react'\n\nexport default (BaseComponent, BaseChildComponent) => getDynamicOptions => {\n  const displayName = BaseComponent.displayName\n\n  return class withDynamicOptions extends Component {\n    static displayName = `withDynamicOptions(${displayName})`\n\n    state = { options: []}\n\n    async componentDidUpdate({value: prevQuery}) {\n      const {value: query} = this.props\n      if (query !== prevQuery) {\n        const options = await getDynamicOptions({query})\n        this.setState({options}) // eslint-disable-line\n      }\n    }\n\n    render() {\n      const {props} = this\n      const {options} = this.state\n      return (\n        <BaseComponent {...props}>\n          {options.map((option, i) => (\n            <BaseChildComponent key={i} value={option}>\n              {option}\n            </BaseChildComponent>\n          ))}\n        </BaseComponent>\n      )\n    }\n  }\n}\n\n```\n\nuse of `withDynamicOptions` for creating a stateful version of `MoleculeAutosuggest`\n```js\n\nimport MoleculeAutosuggest from '@s-ui/react-molecule-autosuggest'\nimport MoleculeAutosuggestOption from '@s-ui/react-molecule-dropdown-option'\n\nimport withDynamicOptions from './hoc/withDynamicOptions'\nimport {withStateValue} from '@s-ui/hoc'\n\n// some function that gets a `{query}` and returns asynchronoudly a list of values\nimport {getAsyncCountriesFromQuery} from './services'\n\nconst MoleculeAutosuggestWithDynamicOptions = withDynamicOptions(\n  MoleculeAutosuggest,\n  MoleculeAutosuggestOption\n)(getAsyncCountriesFromQuery)\n\n\nconst MoleculeAutosuggestWithState = withStateValue(\n  MoleculeAutosuggestWithDynamicOptions\n)\n```\n\nso then, the `MoleculeAutosuggestWithState` can used in this way...\n\n```js\n<MoleculeAutosuggestWithState\n  placeholder=\"Type a Country name...\"\n  onChange={(_, {value}) => console.log(value)}\n  iconClear={<IconClear />}\n/>\n```\n\n\n\n\n\n> **Find full description and more examples in the [demo page](https://sui-components.now.sh/workbench/molecule/autosuggest/demo).**"}}]);