(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{MAGD:function(n,e){n.exports="import React, {Component} from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport MoleculeProgressStep, {STATUSES} from './components/MoleculeProgressStep'\n\nconst BASE_CLASS = `sui-MoleculeProgressSteps`\n\nconst CLASS_STEPS = `${BASE_CLASS}-path`\nconst CLASS_CONTENT = `${BASE_CLASS}-content`\nconst CLASS_COMPRESSED_INFO = `${BASE_CLASS}-compressedInfo`\n\nconst CLASS_VERTICAL = `${BASE_CLASS}--vertical`\nconst CLASS_COMPRESSED = `${BASE_CLASS}--compressed`\n\nclass MoleculeProgressSteps extends Component {\n  get className() {\n    const {vertical, compressed} = this.props\n    return cx(BASE_CLASS, {\n      [CLASS_VERTICAL]: vertical,\n      [CLASS_COMPRESSED]: compressed\n    })\n  }\n\n  get compressedInfoSteps() {\n    const {children} = this.props\n    const childrenNodes = React.Children.toArray(children)\n    const totalSteps = childrenNodes.length\n    const [activeLabel, numActiveStep] = childrenNodes.reduce(\n      (acc, child, index) => {\n        const {status} = child.props\n        if (status === STATUSES.ACTIVE) acc = [child.props.label, index + 1]\n        return acc\n      },\n      []\n    )\n    const stepPositionInfo = `${numActiveStep}/${totalSteps}`\n    return `${stepPositionInfo}: ${activeLabel}`\n  }\n\n  get extendedChildren() {\n    const {children, iconStepDone, compressed} = this.props\n    return React.Children.toArray(children)\n      .filter(Boolean)\n      .map((child, index, children) => {\n        const {\n          icon: iconChild,\n          iconActive,\n          status,\n          children: childrenChild\n        } = child.props\n\n        const totalChildren = children.length\n        const numStep = index + 1\n        const lastStep = index >= totalChildren - 1\n\n        const isVisited = status === STATUSES.VISITED\n        const isActive = status === STATUSES.ACTIVE\n        let icon = iconChild\n        if (isVisited) icon = iconStepDone\n        if (isActive) {\n          icon = iconActive || iconChild\n          this.activeStepContent = childrenChild\n        }\n\n        return React.cloneElement(child, {\n          numStep,\n          lastStep,\n          icon,\n          compressed\n        })\n      })\n  }\n\n  render() {\n    const {\n      extendedChildren,\n      compressedInfoSteps,\n      activeStepContent,\n      className\n    } = this\n    const {compressed} = this.props\n    return (\n      <div className={className}>\n        {compressed && (\n          <p className={CLASS_COMPRESSED_INFO}>{compressedInfoSteps}</p>\n        )}\n        <div className={CLASS_STEPS}>{extendedChildren}</div>\n        <div className={CLASS_CONTENT}>{activeStepContent}</div>\n      </div>\n    )\n  }\n}\n\nMoleculeProgressSteps.displayName = 'MoleculeProgressSteps'\n\nMoleculeProgressSteps.propTypes = {\n  /** children */\n  children: PropTypes.any,\n\n  /** Icon to display when status VISITED */\n  iconStepDone: PropTypes.node.isRequired,\n\n  /** Compressed mode (mobile) */\n  compressed: PropTypes.bool,\n\n  /** Vertical mode */\n  vertical: PropTypes.bool\n}\n\nexport default MoleculeProgressSteps\nexport {MoleculeProgressStep, STATUSES}\n"}}]);