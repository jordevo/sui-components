(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{Y01D:function(n,e){n.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nconst BASE_CLASS = `sui-MoleculeDropdownList`\nconst CLASS_HIDDEN = `is-hidden`\n\nconst SIZES = {\n  SMALL: 'small',\n  MEDIUM: 'medium',\n  LARGE: 'large'\n}\n\nclass MoleculeDropdownList extends Component {\n  refDropdownList = React.createRef()\n\n  get extendedChildren() {\n    const {children, value, size, visible, onSelect, ...props} = this.props\n    return React.Children.toArray(children)\n      .filter(Boolean)\n      .map((child, index) => {\n        const {value: valueChild} = child.props\n        const selected = Array.isArray(value)\n          ? value.includes(valueChild)\n          : value === valueChild\n        return React.cloneElement(child, {\n          ...props,\n          index,\n          onSelect,\n          selected\n        })\n      })\n  }\n\n  get classNames() {\n    const {size, visible} = this.props\n    return cx(BASE_CLASS, `${BASE_CLASS}--${size}`, {\n      [CLASS_HIDDEN]: !visible\n    })\n  }\n\n  getFocusedOptionIndex = options => {\n    const currentElementFocused = document.activeElement\n    return Array.from(options).reduce((focusedOptionIndex, option, index) => {\n      if (option === currentElementFocused) focusedOptionIndex = index\n      return focusedOptionIndex\n    }, 0)\n  }\n\n  handleKeyDown = ev => {\n    const {key} = ev\n    const {getFocusedOptionIndex, refDropdownList} = this\n    const options = refDropdownList.current.children\n    const numOptions = options.length\n    if (key === 'ArrowDown' || key === 'ArrowUp') {\n      const index = getFocusedOptionIndex(options)\n      if (index >= 0 || index <= numOptions) {\n        if (key === 'ArrowDown' && index < numOptions - 1)\n          options[index + 1].focus()\n        if (key === 'ArrowUp' && index > 0) options[index - 1].focus()\n      }\n      ev.preventDefault()\n      ev.stopPropagation()\n    }\n  }\n\n  render() {\n    const {refDropdownList, handleKeyDown, classNames, extendedChildren} = this\n\n    return (\n      <ul\n        ref={refDropdownList}\n        tabIndex=\"0\"\n        onKeyDown={handleKeyDown}\n        className={classNames}\n      >\n        {extendedChildren}\n      </ul>\n    )\n  }\n}\n\nMoleculeDropdownList.displayName = 'MoleculeDropdownList'\n\nMoleculeDropdownList.propTypes = {\n  /** Content to be included in the list (MoleculeDropdownOption) */\n  children: PropTypes.node,\n\n  /** Visible or not */\n  visible: PropTypes.bool,\n\n  /** selected value */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /** size (height) of the list */\n  size: PropTypes.oneOf(Object.values(SIZES)),\n\n  /** callback on select option */\n  onSelect: PropTypes.func\n}\n\nMoleculeDropdownList.defaultProps = {\n  size: SIZES.SMALL,\n  onSelect: () => {}\n}\n\nexport default MoleculeDropdownList\nexport {SIZES as moleculeDropdownListSizes}\n"}}]);