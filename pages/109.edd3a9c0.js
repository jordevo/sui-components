(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{"Vt+p":function(n,e){n.exports="import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nimport Button from './Button'\n\nconst CLASS = 'sui-AtomButton'\nconst TYPES = ['primary', 'accent', 'secondary', 'tertiary']\nconst GROUP_POSITIONS = {\n  FIRST: 'first',\n  MIDDLE: 'middle',\n  LAST: 'last'\n}\nconst SIZES = ['small', 'large']\nconst MODIFIERS = ['disabled', 'fullWidth', 'focused', 'negative', 'link']\nconst OWN_PROPS = [\n  ...TYPES,\n  ...SIZES,\n  'groupPosition',\n  'leftIcon',\n  'rightIcon',\n  'className',\n  'children',\n  'fullWidth',\n  'focused',\n  'negative',\n  'type'\n]\nconst CLASSES = [...TYPES, ...SIZES, ...MODIFIERS, 'empty'].reduce(\n  (res, key) => Object.assign(res, {[key]: `${CLASS}--${key}`}),\n  {}\n)\n\n/**\n * Get props cleaning out AtomButton own props\n * @param  {Object} props\n * @return {Object}\n */\nconst cleanProps = props => {\n  let newProps = {...props}\n  OWN_PROPS.forEach(key => delete newProps[key])\n  return newProps\n}\n\n/**\n * Get modifiers to apply according to props\n * @param  {Object} props\n * @return {Array<String>}\n */\nconst getModifiers = props => {\n  return Object.keys(props).filter(\n    name => props[name] && MODIFIERS.includes(name)\n  )\n}\n\nconst AtomButton = props => {\n  const {\n    children,\n    className,\n    groupPosition,\n    leftIcon,\n    rightIcon,\n    size,\n    title,\n    type\n  } = props\n\n  const classNames = cx(\n    CLASS,\n    CLASSES[type],\n    groupPosition && `${CLASS}-group ${CLASS}-group--${groupPosition}`,\n    size && CLASSES[size],\n    getModifiers(props).map(key => CLASSES[key]),\n    !children && CLASSES.empty,\n    className\n  )\n  const newProps = cleanProps(props)\n\n  return (\n    <Button {...newProps} className={classNames} title={title}>\n      <span className={`${CLASS}-inner`}>\n        {leftIcon && <span className={`${CLASS}-leftIcon`}>{leftIcon}</span>}\n        {leftIcon || rightIcon ? (\n          <span className={`${CLASS}-text`}>{children}</span>\n        ) : (\n          children\n        )}\n        {rightIcon && <span className={`${CLASS}-rightIcon`}>{rightIcon}</span>}\n      </span>\n    </Button>\n  )\n}\n\nAtomButton.displayName = 'AtomButton'\n\nAtomButton.propTypes = {\n  /**\n   * HTML element: if true, render a link. Otherwise render a button\n   */\n  link: PropTypes.bool,\n  /**\n   * URL to be added on the HTML link\n   */\n  href: PropTypes.string,\n  /**\n   * Target to be added on the HTML link\n   */\n  target: PropTypes.string,\n  /**\n   * Title to be added on button or link\n   */\n  title: PropTypes.string,\n  /**\n   * Type of button: 'primary' (default), 'accent', 'secondary', 'tertiary'\n   */\n  type: PropTypes.oneOf(TYPES),\n  /**\n   * Group position: 'first', 'middle' (default), 'last'\n   */\n  groupPosition: PropTypes.oneOf(Object.values(GROUP_POSITIONS)),\n  /**\n   * Size of button{\n   * FIRST: 'first',\n   * MIDDLE: 'middle',\n   * LAST: 'last'}: 'small',\n   */\n  size: PropTypes.oneOf(SIZES),\n  /**\n   * Negative: style for dark backgrounds.\n   */\n  negative: PropTypes.bool,\n  /**\n   * Modifier: state of :hover,:active, :focus\n   */\n  focused: PropTypes.bool,\n  /**\n   * Disable: faded with no interaction.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Modifier: full width (100%)\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Icon to be added on the left of the content\n   */\n  leftIcon: PropTypes.node,\n  /**\n   * Icon to be added on the right of the content\n   */\n  rightIcon: PropTypes.node,\n  /**\n   * Content to be included in the button\n   */\n  children: PropTypes.node,\n  /**\n   * Classes to add to button\n   */\n  className: PropTypes.any,\n  /**\n   * Factory used to create navigation links\n   */\n  linkFactory: PropTypes.func,\n  /**\n   * if true, type=\"submit\" (needed when several buttons coexist under the same form)\n   */\n  isSubmit: PropTypes.bool,\n  /**\n   * if true, type=\"button\" (needed when several buttons coexist under the same form)\n   */\n  isButton: PropTypes.bool\n}\n\nAtomButton.defaultProps = {\n  type: 'primary'\n}\n\nexport default AtomButton\nexport {GROUP_POSITIONS as atomButtonGroupPositions}\nexport {TYPES as atomButtonTypes}\n"}}]);