(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{yeyi:function(n,e){n.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport AtomTag, {atomTagSizes} from '@schibstedspain/sui-atom-tag'\nimport AtomInput, {inputSizes} from '@s-ui/react-atom-input'\nimport cx from 'classnames'\n\nconst BASE_CLASS = 'sui-AtomInput'\nconst CLASS_TAGS = `${BASE_CLASS}--withTags`\nconst CLASS_TAGS_FOCUS = `${CLASS_TAGS}--focus`\nconst CLASS_TAGS_ERROR = `${CLASS_TAGS}--error`\nconst CLASS_TAGS_SUCCESS = `${CLASS_TAGS}--success`\n\n// eslint-disable-next-line react/prop-types\nconst AtomTagItem = ({onClose, id, ...props}) => {\n  const _onClose = e => {\n    onClose && onClose(e, {id})\n  }\n  return <AtomTag onClose={_onClose} {...props} />\n}\n\nclass MoleculeInputTags extends Component {\n  state = {\n    focus: false\n  }\n\n  getClassNames = (focus, size, errorState) => {\n    return cx(CLASS_TAGS, {\n      [CLASS_TAGS_FOCUS]: focus === true,\n      [CLASS_TAGS_ERROR]: errorState === true,\n      [CLASS_TAGS_SUCCESS]: errorState === false,\n      [`${CLASS_TAGS}-${size}`]: size\n    })\n  }\n\n  removeTag = (e, {id: indexTag}) => {\n    const {onChangeTags, optionsData, tags: _tags} = this.props\n    let tags = _tags.filter((_, i) => i !== indexTag)\n    if (optionsData) {\n      const keys = Object.keys(optionsData)\n      tags = keys.filter(key => tags.includes(optionsData[key]))\n    }\n    onChangeTags(e, {tags})\n  }\n\n  addTag = ev => {\n    ev.preventDefault()\n    const {onChangeTags, value} = this.props\n    if (value) {\n      const tags = [...this.props.tags, value]\n      onChangeTags(ev, {tags, value: ''})\n    }\n  }\n\n  onChange = (ev, {value}) => {\n    const {onChange} = this.props\n    onChange(ev, {value})\n  }\n\n  handleFocusIn = () => {\n    this.setState({focus: true})\n  }\n\n  handleFocusOut = () => {\n    this.setState({focus: false})\n  }\n\n  render() {\n    const {onChange, addTag, removeTag, handleFocusIn, handleFocusOut} = this\n    const {tagsCloseIcon, tags, value, innerRefInput, ...props} = this.props\n    const {focus} = this.state\n\n    return (\n      <div className={this.getClassNames(focus, props.size, props.errorState)}>\n        {tags.map((label, index) => (\n          <AtomTagItem\n            key={index}\n            id={index}\n            closeIcon={tagsCloseIcon}\n            onClose={removeTag}\n            label={label}\n            size={atomTagSizes.SMALL}\n            responsive\n          />\n        ))}\n        <AtomInput\n          {...props}\n          value={value}\n          onChange={onChange}\n          onEnter={addTag}\n          onFocus={handleFocusIn}\n          onBlur={handleFocusOut}\n          reference={innerRefInput}\n          noBorder\n        />\n      </div>\n    )\n  }\n}\n\nMoleculeInputTags.displayName = 'MoleculeInputTags'\n\nMoleculeInputTags.propTypes = {\n  /* close icon to be displayed on tags */\n  tagsCloseIcon: PropTypes.node.isRequired,\n\n  /* list of pairs value/text to be handled */\n  optionsData: PropTypes.object,\n\n  /* list of values displayed as tags */\n  tags: PropTypes.array,\n\n  /* value of the input */\n  value: PropTypes.string,\n\n  /* callback to be called with every update of the list of tags */\n  onChangeTags: PropTypes.func,\n\n  /* callback to be called with every update of the input value */\n  onChange: PropTypes.func,\n\n  /* object generated w/ Reacte.createRef method to get a DOM reference of internal input */\n  innerRefInput: PropTypes.object\n}\n\nMoleculeInputTags.defaultProps = {\n  size: inputSizes.MEDIUM,\n  value: '',\n  tags: [],\n  onChangeTags: () => {},\n  onChange: () => {}\n}\n\nexport default MoleculeInputTags\nexport {inputSizes}\n"}}]);