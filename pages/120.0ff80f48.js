(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{Z69B:function(n,t){n.exports="# AtomInput\n\n> Inputs are the text fields that users fill in with different types of information. These include dates, passwords or even short answers. It\u2019s a field where users can write alphanumeric texts.\n\n## Installation\n\n```sh\n\u019b npm install @s-ui/react-atom-input --save\n```\n\n## Usage\n\n### Add styles\n\nTo use the component's own styles, create a .scss file and import them inside.\n\n```scss\n@import '~@s-ui/react-atom-input/lib/index';\n```\n\nIf you want to customize your components, create your own theme and add it to your component just **before**.\n\n```scss\n@import 'custom-settings';\n@import '~@s-ui/react-atom-input/lib/index';\n```\n\n    \n### You can use native types like this\n\n```js\nimport AtomInput from '@s-ui/react-atom-input'\n\nreturn <AtomInput type='number' /> // possible type options: text, number, date and password\n```\n\n### Non native Inputs\n\n#### SUI-Password\n\nIn order to use SUI defined Password Input pass the prop `type='sui-password'` to the Input component.\n\n```js\nimport AtomInput from '@s-ui/react-atom-input'\n\nreturn <AtomInput type='sui-password' />\n```\n\n#### Mask\n\nWraps the https://unmanner.github.io/imaskjs/ lib, used if the input must follow a regex or a specific format/pattern . Using `type='mask'` activates this input, which will be expecting the `mask` prop type to be passed by.\n\n```js\nconst bankAccountMask = { // checkout all options here https://unmanner.github.io/imaskjs/guide.html\n  mask: 'ES00 0000 0000 00 0000000000'\n}\n\n return <AtomInput type='mask' mask={bankAccountMask} placeholder='ES00 0000 0000 00 0000000000' />\n```\n\n### Sizes\n\nThere are defined 2 sizes (`MEDIUM` and `SMALL`) available at the exported object `inputSizes` and that can be set through the prop `size`\n\n```js\n<AtomInput\n  size={inputSizes.SMALL}\n  name=\"first\"\n  placeholder=\"Small input\"\n/>\n```\n\n\n### Addons\n\n> [What are addons?](https://paper.dropbox.com/doc/SUI-Input-03mHJFkOCjviSZevsaTwm#:uid=125362683844628624581838&h2=Icons-and-addons-inside-the-in)\n\nAddons are passed as prop, use **leftAddon** or **rightAddon** in order to set the position inside the Input\n\n#### Addon usage\n\n```js\nimport AtomInput from '@s-ui/react-atom-input'\n\nreturn <AtomInput leftAddon='http://' rightAddon='@schibsted.com' />\n```\n\n### Icons\n\nIcons are passed as prop, use **leftIcon** or **rightIcon** in order to set the position inside the Input\n\n\n```js\nimport AtomInput from '@s-ui/react-atom-input'\n\nconst logo = 'my_logo.svg'\nconst leftIcon = () => <img src={logo} />\n\n<AtomInput leftIcon={leftIcon} />\n```\n\nYou can also pass a handler for each Icon using the props **onClickLeftIcon** or **onClickRightIcon**\n\n```js\n<AtomInput\n  name=\"second\"\n  placeholder=\"Medium Input\"\n  leftIcon={LeftIcon}\n  rightIcon={IconLocation}\n  onClickRightIcon={ e => alert(\"clicked right icon\")}\n/>\n```\n\n\n### Error states\n\nThere are 3 error states:\n\n* error state = **true**, will show a **red** border around the input field\n* error state = **false**, will show a **green** border around the input field\n* error state = **null**, will show the by **default** border around the input field\n\n```js\n<AtomInput \n  name=\"second\" \n  placeholder=\"Success input\" \n  errorState={false} \n/>\n```\n\n### Form Usage\n\nEach field returns its value on every onChange event so you can save it inside your form state.\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Input from '@s-ui/react-atom-input'\nimport Button from '@schibstedspain/sui-atom-button'\n\nclass SimpleLoginForm extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      email: {\n        value: '',\n        errorState: null\n      },\n      password: {\n        value: '',\n        errorState: null\n      }\n    }\n\n    this.onChange = this.onChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onBlur = this.onBlur.bind(this)\n  }\n\n  isEmail(value) {\n    return /(.+)@(.+){2,}\\.(.+){2,}/.test(value)\n  }\n\n  onChange({value, field}) {\n    this.setState(\n      Object.assign({}, this.state, {\n        [field]: {\n          value,\n          errorState: null\n        }\n      })\n    )\n  }\n\n  onBlur({value, field}) {\n    let errorState = !this.isEmail(value)\n    this.setState({\n      [field]: {errorState, value}\n    })\n  }\n\n  onSubmit(ev) {\n    ev.preventDefault()\n    ev.stopPropagation()\n\n    window.alert(JSON.stringify(this.state))\n  }\n\n  render() {\n    const {email, password} = this.state\n    return (\n      <form>\n        <Input\n          type=\"text\"\n          value={email.value}\n          onChange={({ev, value}) => this.onChange({value, field: 'email', ev})}\n          onBlur={ev =>\n            this.onBlur({value: ev.target.value, field: 'email'})\n          }\n          errorState={this.state.email.errorState}\n        />\n        <Input\n          type=\"sui-password\"\n          value={password.value}\n          onChange={({ev, value}) =>\n            this.onChange({value, field: 'password', ev})\n          }\n        />\n        <Button onClick={this.onSubmit}>Login</Button>\n      </form>\n    )\n  }\n}\n\n```\n"}}]);