(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{FhGZ:function(e,n){e.exports="import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nimport AtomButton from '@schibstedspain/sui-atom-button'\nimport AtomInput, {inputSizes} from '@s-ui/react-atom-input'\nimport MoleculeField from '@s-ui/react-molecule-field'\n\nconst BUTTON_TYPE = 'secondary'\n\nconst BASE_CLASS = `sui-MoleculeDataCounter`\nconst CLASS_INPUT_CONTAINER = `${BASE_CLASS}-container`\n\nconst MoleculeDataCounter = ({\n  id,\n  label,\n  value,\n  errorText: errorTextProps,\n  size = inputSizes.MEDIUM,\n  charsSize = 2,\n  max = 99,\n  min = 1,\n  minValueHelpText,\n  minValueErrorText,\n  maxValueHelpText,\n  maxValueErrorText,\n  onChange,\n  disabled\n}) => {\n  if (value) value = String(value)\n  else if (min) value = String(min)\n  else value = '0'\n\n  const [internalValue, setInternalValue] = useState(value)\n\n  const numInternalValue = Number(internalValue)\n  const numMax = Number(max)\n  const numMin = Number(min)\n\n  const isBelowMaxValue = numInternalValue < numMax\n  const isOverMinValue = numInternalValue > numMin\n  const isMaxValue = numInternalValue === numMax\n  const isMinValue = numInternalValue === numMin\n  const isLowerThanMinValue = numInternalValue < numMin\n  const isHigherThanMaxValue = numInternalValue > numMax\n\n  const decrementDisabled = disabled || numInternalValue <= numMin\n  const incrementDisabled = disabled || numInternalValue >= numMax\n\n  const assignValue = (e, {nValue}) => {\n    const value = String(nValue)\n    setInternalValue(value)\n    onChange(e, {value})\n  }\n\n  const incrementValue = e => {\n    if (isBelowMaxValue) {\n      const nValue = internalValue === '' ? min : parseInt(internalValue) + 1\n      assignValue(e, {nValue})\n    }\n  }\n\n  const decrementValue = e => {\n    if (isOverMinValue) {\n      const nValue = internalValue === '' ? min : parseInt(internalValue) - 1\n      assignValue(e, {nValue})\n    }\n  }\n\n  const handleChange = (e, {value}) => {\n    const nValue = parseInt(value, 10)\n    if (value.length <= 2 && !isNaN(nValue)) {\n      assignValue(e, {nValue})\n    }\n  }\n\n  const handleKeyDown = (e, {value}) => {\n    const {key} = e\n    if (key === 'ArrowUp') incrementValue(e)\n    if (key === 'ArrowDown') decrementValue(e)\n  }\n\n  let helpText, errorText\n  if (!disabled) {\n    if (isMaxValue) helpText = maxValueHelpText\n    else if (isMinValue) helpText = minValueHelpText\n    else helpText = null\n\n    if (isLowerThanMinValue) errorText = minValueErrorText\n    else if (isHigherThanMaxValue) errorText = maxValueErrorText\n    else if (errorTextProps) errorText = errorTextProps\n    else errorText = null\n  }\n\n  return (\n    <div className={BASE_CLASS}>\n      <MoleculeField\n        name={id}\n        label={label}\n        helpText={helpText}\n        errorText={errorText}\n      >\n        <div\n          className={cx(\n            CLASS_INPUT_CONTAINER,\n            `${CLASS_INPUT_CONTAINER}--${size}`\n          )}\n        >\n          <AtomButton\n            disabled={decrementDisabled}\n            onClick={decrementValue}\n            type={BUTTON_TYPE}\n          >\n            -\n          </AtomButton>\n          <AtomInput\n            id={id}\n            disabled={disabled}\n            size={size}\n            charsSize={charsSize}\n            value={internalValue}\n            onKeyDown={handleKeyDown}\n            onChange={handleChange}\n          />\n          <AtomButton\n            disabled={incrementDisabled}\n            onClick={incrementValue}\n            type={BUTTON_TYPE}\n          >\n            +\n          </AtomButton>\n        </div>\n      </MoleculeField>\n    </div>\n  )\n}\n\nMoleculeDataCounter.displayName = 'MoleculeDataCounter'\n\nMoleculeDataCounter.propTypes = {\n  /** Text to be displayed as label */\n  label: PropTypes.string.isRequired,\n\n  /** used as label for attribute and input element id */\n  id: PropTypes.string.isRequired,\n\n  /** width of input based in number of characters (native \"size\" attribute) */\n  charsSize: PropTypes.number.isRequired,\n\n  /** text to display in case of error */\n  errorText: PropTypes.string,\n\n  /** value of the control */\n  value: PropTypes.number.isRequired,\n\n  /** max value allowed */\n  max: PropTypes.number.isRequired,\n\n  /** min value allowed */\n  min: PropTypes.number.isRequired,\n\n  /* callback to be called with every update of the input value */\n  onChange: PropTypes.func,\n\n  /* HelpText to be displayed when value reaches minimun value */\n  minValueHelpText: PropTypes.string.isRequired,\n\n  // /* ErrorText to be displayed when value is lower than minimun value */\n  minValueErrorText: PropTypes.string.isRequired,\n\n  // /* HelpText to be displayed when value reaches maximum value */\n  maxValueHelpText: PropTypes.string.isRequired,\n\n  // /* ErrorText to be displayed when value is lower than maximun value */\n  maxValueErrorText: PropTypes.string.isRequired,\n\n  /* component disabled or not */\n  disabled: PropTypes.bool,\n\n  /** 's' or 'm', default: 'm' */\n  size: PropTypes.oneOf(Object.values(inputSizes))\n}\n\nexport default MoleculeDataCounter\nexport {inputSizes as moleculeDataCounterSizes}\n"}}]);